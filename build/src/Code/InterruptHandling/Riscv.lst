GAS LISTING /tmp/ccwpPJqp.s 			page 1


   1              		.file	"Riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv18exitSupervisorTrapEv
   9              	_ZN5Riscv18exitSupervisorTrapEv:
  10              	.LFB50:
  11              		.file 1 "src/Code/InterruptHandling/Riscv.cpp"
   1:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/InterruptHandling/Riscv.hpp"
   2:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/Printing/print.hpp"
   3:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/MemoryAllocator/MemoryAllocator.hpp"
   4:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/Thread/TCB.hpp"
   5:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/Semaphore/KernelSemaphore.hpp"
   6:src/Code/InterruptHandling/Riscv.cpp **** #include "../../../h/Code/Console/KernelBuffer.hpp"
   7:src/Code/InterruptHandling/Riscv.cpp **** 
   8:src/Code/InterruptHandling/Riscv.cpp **** void Riscv::exitSupervisorTrap() {
  12              		.loc 1 8 34
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/Code/InterruptHandling/Riscv.cpp ****     __asm__ volatile ("csrw sepc, ra"); // u sepc postavljamo vrednost ra jer hocemo da se tu vrati
  20              		.loc 1 9 5
  21              		.loc 1 9 39 is_stmt 0
  22              	#APP
  23              	# 9 "src/Code/InterruptHandling/Riscv.cpp" 1
  10              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 30 is_stmt 0
  28              	# 10 "src/Code/InterruptHandling/Riscv.cpp" 1
  11              	    // sret instrukcija radi sledece:
  12:src/Code/InterruptHandling/Riscv.cpp ****     // prelazi se u rezim koji pise u SPP, u pc se upisuje vrednost iz sepc i u bit SIE sstatus reg
  13:src/Code/InterruptHandling/Riscv.cpp **** }
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 13 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE50:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB51:
  14:src/Code/InterruptHandling/Riscv.cpp **** 
GAS LISTING /tmp/ccwpPJqp.s 			page 2


  15:src/Code/InterruptHandling/Riscv.cpp **** void Riscv::handleSupervisorTrap() {
  47              		.loc 1 15 36 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101F4 		addi	sp,sp,-192
  50              		.cfi_def_cfa_offset 192
  51 0024 233C110A 		sd	ra,184(sp)
  52 0028 2338810A 		sd	s0,176(sp)
  53 002c 2334910A 		sd	s1,168(sp)
  54 0030 2330210B 		sd	s2,160(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57              		.cfi_offset 9, -24
  58              		.cfi_offset 18, -32
  59 0034 1304010C 		addi	s0,sp,192
  60              		.cfi_def_cfa 8, 0
  16:src/Code/InterruptHandling/Riscv.cpp **** 
  17:src/Code/InterruptHandling/Riscv.cpp ****     // alokacija prostora na steku za registre a0-a7; hocemo na steku da ih sacuvamo jer su to para
  18:src/Code/InterruptHandling/Riscv.cpp ****     __asm__ volatile ("addi sp,sp,-64");
  61              		.loc 1 18 5
  62              		.loc 1 18 40 is_stmt 0
  63              	#APP
  64              	# 18 "src/Code/InterruptHandling/Riscv.cpp" 1
  19              	    // cuvanje registara a0-a7 na steku
  20:src/Code/InterruptHandling/Riscv.cpp ****     pushSysCallParameters();
  65              		addi sp,sp,-64
  66              	# 0 "" 2
  67              		.loc 1 20 5 is_stmt 1
  68              		.loc 1 20 26 is_stmt 0
  69              	#NO_APP
  70 003c 97000000 		call	_ZN5Riscv21pushSysCallParametersEv@plt
  70      E7800000 
  71              	.LVL0:
  21:src/Code/InterruptHandling/Riscv.cpp **** 
  22:src/Code/InterruptHandling/Riscv.cpp ****     // citanje razloga ulaska u prekidnu rutinu i smestanje u promenljivu scause
  23:src/Code/InterruptHandling/Riscv.cpp ****     uint64 volatile scause = readScause();
  72              		.loc 1 23 5 is_stmt 1
  73              	.LBB90:
  74              	.LBB91:
  75              		.file 2 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp"
   1:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** #ifndef RISCV_HPP
   2:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** #define RISCV_HPP
   3:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
   4:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** #include "../../../lib/hw.h"
   5:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
   6:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** class Riscv {
   7:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** public:
   8:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // prekidna rutina (definisana u assembly fajlu supervisorTrap.S; ignorisati upozorenje CLiona 
   9:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void supervisorTrap();
  10:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  11:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // definisana u registersStack.S; ova metoda treba da sacuva registre a0-a7 na steku (preko ovi
  12:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void pushSysCallParameters();
  13:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  14:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // definisana u registersStack.S; ova metoda treba da sacuva registre x3..x31 na steku
  15:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void pushMostRegisters();
  16:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  17:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // definisana u registersStack.S; ova metoda treba da restaurira registre x3..x31 sa steka
  18:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void popMostRegisters();
GAS LISTING /tmp/ccwpPJqp.s 			page 3


  19:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  20:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void exitSupervisorTrap();
  21:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  22:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz statusnog registra sstatus (ovaj registar pamti trenutno stanje proceso
  23:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readSstatus();
  24:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  25:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u statusni registar sstatus
  26:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeSstatus(uint64 sstatus);
  27:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  28:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // pod spoljasnjim prekidima se podrazumevaju prekidi od tajmera i spoljasnji hardverski prekid
  29:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // u korisnickom rezimu bit SIE sstatus registra se ignorise - spoljasnji prekidi su tada podra
  30:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     enum BitMaskSstatus {
  31:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SSTATUS_SIE = (1 << 1), // ovaj bit govori da li su dozvoljeni spoljasnji prekidi (0 - nisu
  32:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SSTATUS_SPIE = (1 << 5), // ovaj bit govori koja je bila prethodna vrednost bita SIE (pre s
  33:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SSTATUS_SPP = (1 << 8) // ovaj bit govori iz kog rezima se skocilo na prekidnu rutinu (0 - 
  34:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     };
  35:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  36:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sstatus na 1 (odgovarajuca maska se prosledjuje kao arg
  37:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskSetBitsSstatus(uint64 mask);
  38:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  39:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sstatus na 0 (odgovarajuca maska se prosledjuje kao arg
  40:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskClearBitsSstatus(uint64 mask);
  41:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  42:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra sip (ovaj registar pamti koji zahtevi za prekid su trenutno ak
  43:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readSip();
  44:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  45:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar sip
  46:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeSip(uint64 sip);
  47:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  48:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     enum BitMaskSip {
  49:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SIP_SSIP = (1 << 1), // ovaj bit govori da li je aktivan zahtev za softverski prekid (0 - n
  50:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SIP_SEIP = (1 << 9) // ovaj bit govori da li je aktivan zahtev za spoljasnji hardverski pre
  51:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     };
  52:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  53:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sip na 1 (odgovarajuca maska se prosledjuje kao argumen
  54:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskSetBitsSip(uint64 mask);
  55:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  56:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sip na 0 (odgovarajuca maska se prosledjuje kao argumen
  57:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskClearBitsSip(uint64 mask);
  58:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  59:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra sie (ovaj registar pamti koji prekidi su trenutno dozvoljeni)
  60:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readSie();
  61:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  62:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar sie
  63:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeSie(uint64 sie);
  64:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  65:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // vrednost registra sie se uzima u obzir prilikom izvrsavanja u korisnickom rezimu;
  66:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // ako se program izvrsava u sistemskom rezimu i bit SIE sstatus registra je nula, vrednost sie
  67:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     enum BitMaskSie {
  68:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SIE_SSIE = (1 << 1), // ovaj bit govori da li su dozvoljeni softverski prekidi (0 - nisu, 1
  69:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****         SIE_SEIE = (1 << 9) // ovaj bit govori da li su dozvoljeni spoljasnji hardverski prekidi (0
  70:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     };
  71:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  72:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sie na 1 (odgovarajuca maska se prosledjuje kao argumen
  73:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskSetBitsSie(uint64 mask);
  74:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  75:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // postavi odgovarajuce bite u registru sie na 0 (odgovarajuca maska se prosledjuje kao argumen
GAS LISTING /tmp/ccwpPJqp.s 			page 4


  76:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void maskClearBitsSie(uint64 mask);
  77:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  78:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra scratch (ovaj registar sluzi za cuvanje privremenih vrednosti)
  79:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readScratch();
  80:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  81:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar scratch
  82:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeScratch(uint64 scratch);
  83:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  84:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra sepc (ovaj registar cuva vrednost registra pc iz korisnickog r
  85:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // to ce biti adresa instrukcije ecall ili adresa prve neizvrsene/prekinute instrukcije)
  86:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readSepc();
  87:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  88:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar sepc
  89:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeSepc(uint64 sepc);
  90:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  91:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra scause (ovaj registar cuva razlog prelaska u sistemski rezim)
  92:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readScause();
  93:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  94:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar scause
  95:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeScause(uint64 scause);
  96:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
  97:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra stvec (ovaj registar cuva adresu prekidne rutine)
  98:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readStvec();
  99:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 100:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar stvec
 101:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeStvec(uint64 stvec);
 102:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 103:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // procitaj vrednost iz registra stval (ovaj registar cuva dodatan opis greske koja se dogodila
 104:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static uint64 readStval();
 105:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 106:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // upisi vrednost u registar stval
 107:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void writeStval(uint64 stval);
 108:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 109:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** private:
 110:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // obrada sistemskog poziva/prekida/izuzetka
 111:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     static void handleSupervisorTrap();
 112:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** };
 113:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 114:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** // ove metode pisem kao inline da ne bi bilo rezijskih troskova koje iziskuje poziv funkcije (preno
 115:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** // funkcije, cuvanje povratne adrese)- ovako ce kod tela funkcije samo da se ugradi na mesto poziva
 116:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** // poziva funkcije
 117:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readSstatus() {
 118:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // volatile kvalifikator obezbedjuje da prevodilac ne izvrsi optimizaciju i sacuva lokalnu prom
 119:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     // registara - umesto toga, sacuvace je na steku
 120:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile sstatus;
 121:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 122:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sstatus;
 123:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 124:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 125:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeSstatus(uint64 sstatus) {
 126:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 127:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 128:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 129:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskSetBitsSstatus(uint64 mask) {
 130:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 131:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 132:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
GAS LISTING /tmp/ccwpPJqp.s 			page 5


 133:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskClearBitsSstatus(uint64 mask) {
 134:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 135:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 136:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 137:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readSip() {
 138:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile sip;
 139:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 140:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sip;
 141:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 142:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 143:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeSip(uint64 sip) {
 144:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 145:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 146:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 147:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskSetBitsSip(uint64 mask) {
 148:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 149:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 150:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 151:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskClearBitsSip(uint64 mask) {
 152:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 153:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 154:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 155:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readSie() {
 156:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile sie;
 157:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sie], sie" : [sie] "=r"(sie));
 158:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sie;
 159:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 160:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 161:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeSie(uint64 sie) {
 162:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw sie, %[sie]" : : [sie] "r"(sie));
 163:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 164:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 165:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskSetBitsSie(uint64 mask) {
 166:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrs sie, %[mask]" : : [mask] "r"(mask));
 167:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 168:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 169:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::maskClearBitsSie(uint64 mask) {
 170:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrc sie, %[mask]" : : [mask] "r"(mask));
 171:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 172:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 173:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readScratch() {
 174:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile scratch;
 175:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[scratch], scratch" : [scratch] "=r"(scratch));
 176:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return scratch;
 177:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 178:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 179:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeScratch(uint64 scratch) {
 180:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw scratch, %[scratch]" : : [scratch] "r"(scratch));
 181:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 182:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 183:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readSepc() {
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile sepc;
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 187:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 188:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 189:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeSepc(uint64 sepc) {
GAS LISTING /tmp/ccwpPJqp.s 			page 6


 190:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 191:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 192:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 193:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readScause() {
 194:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile scause;
  76              		.loc 2 194 5
 195:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  77              		.loc 2 195 5
  78              		.loc 2 195 72 is_stmt 0
  79              	#APP
  80              	# 195 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 196              	    return scause;
  81              		csrr a5, scause
  82              	# 0 "" 2
  83              	#NO_APP
  84 0048 2330F4F8 		sd	a5,-128(s0)
  85              		.loc 2 196 5 is_stmt 1
  86              		.loc 2 196 12 is_stmt 0
  87 004c 833704F8 		ld	a5,-128(s0)
  88              	.LBE91:
  89              	.LBE90:
  90              		.loc 1 23 41
  91 0050 233CF4FC 		sd	a5,-40(s0)
  24:src/Code/InterruptHandling/Riscv.cpp **** 
  25:src/Code/InterruptHandling/Riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL) {
  92              		.loc 1 25 5 is_stmt 1
  93              	.LBB92:
  94              		.loc 1 25 16 is_stmt 0
  95 0054 033784FD 		ld	a4,-40(s0)
  96              		.loc 1 25 40
  97 0058 93078000 		li	a5,8
  98 005c 6304F708 		beq	a4,a5,.L4
  99              		.loc 1 25 50 discriminator 2
 100 0060 033784FD 		ld	a4,-40(s0)
 101              		.loc 1 25 40 discriminator 2
 102 0064 93079000 		li	a5,9
 103 0068 630EF706 		beq	a4,a5,.L4
 104              	.LBE92:
  26:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): ne; razlog prekida: ecall iz korisnickog ili sis
  27:src/Code/InterruptHandling/Riscv.cpp **** 
  28:src/Code/InterruptHandling/Riscv.cpp ****         // na steku niti koja je pozvala sistemski poziv ce biti sacuvane vrednosti sepc i sstatus;
  29:src/Code/InterruptHandling/Riscv.cpp ****         // ovo radimo jer se kod ecall-a u sepc cuva adresa instrukcije ecall, a hocemo da se pri p
  30:src/Code/InterruptHandling/Riscv.cpp ****         // na instrukciju posle ecall (sret upisuje sepc u pc, sve instrukcije su duzine 4 bajta)
  31:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sepc = readSepc() + 4;
  32:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sstatus = readSstatus();
  33:src/Code/InterruptHandling/Riscv.cpp **** 
  34:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sysCallCode; // iz registra a0 citamo kod sistemskog poziva i upisujemo ga 
  35:src/Code/InterruptHandling/Riscv.cpp ****         __asm__ volatile ("ld %[sysCallCode],0(sp)" : [sysCallCode] "=r"(sysCallCode));
  36:src/Code/InterruptHandling/Riscv.cpp **** 
  37:src/Code/InterruptHandling/Riscv.cpp ****         if (sysCallCode == 0x01) {
  38:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_alloc
  39:src/Code/InterruptHandling/Riscv.cpp **** 
  40:src/Code/InterruptHandling/Riscv.cpp ****             size_t volatile numberOfBlocks; // broj blokova memorije koje je korisnik zatrazio - ci
  41:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[numberOfBlocks],8(sp)" : [numberOfBlocks] "=r"(numberOfBlocks))
  42:src/Code/InterruptHandling/Riscv.cpp **** 
  43:src/Code/InterruptHandling/Riscv.cpp ****             // izvrsavamo kernel kod - alociramo memoriju koju je korisnik trazio i upisujemo njenu
  44:src/Code/InterruptHandling/Riscv.cpp ****             void* allocatedMemory = MemoryAllocator::getInstance().allocateSegment(numberOfBlocks);
GAS LISTING /tmp/ccwpPJqp.s 			page 7


  45:src/Code/InterruptHandling/Riscv.cpp **** 
  46:src/Code/InterruptHandling/Riscv.cpp ****             // upisujemo adresu te memorije u registar a0 kao povratnu vrednost ovog sistemskog poz
  47:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[allocatedMemory]" : : [allocatedMemory] "r"(allocatedMemory)
  48:src/Code/InterruptHandling/Riscv.cpp **** 
  49:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x02) {
  50:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_free
  51:src/Code/InterruptHandling/Riscv.cpp **** 
  52:src/Code/InterruptHandling/Riscv.cpp ****             uint64* volatile freeThisMemory; // ovde cemo smestiti adresu memorije koju treba oslob
  53:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[freeThisMemory],8(sp)" : [freeThisMemory] "=r"(freeThisMemory))
  54:src/Code/InterruptHandling/Riscv.cpp **** 
  55:src/Code/InterruptHandling/Riscv.cpp ****             // izvrsavamo kernel kod - dealociramo memoriju koju je korisnik prosledio i rezultat o
  56:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = MemoryAllocator::getInstance().deallocateSegment(freeThisMemory);
  57:src/Code/InterruptHandling/Riscv.cpp **** 
  58:src/Code/InterruptHandling/Riscv.cpp ****             // upisujemo informaciju o uspehu ove operacije u registar a0 kao povratnu vrednost ovo
  59:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
  60:src/Code/InterruptHandling/Riscv.cpp **** 
  61:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x11) {
  62:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create
  63:src/Code/InterruptHandling/Riscv.cpp **** 
  64:src/Code/InterruptHandling/Riscv.cpp ****             TCB** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost pokazivaca ko
  65:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
  66:src/Code/InterruptHandling/Riscv.cpp ****             void (*startRoutine)(void*); // ovde cemo smestiti adresu funkcije koju novokreirana ni
  67:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
  68:src/Code/InterruptHandling/Riscv.cpp ****             void* arg; // ovde smestamo adresu argumenta koji treba proslediti funkciji cija je adr
  69:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
  70:src/Code/InterruptHandling/Riscv.cpp ****             void* stack; // ovde smestamo adresu steka koji je alociran za nit koju treba napraviti
  71:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
  72:src/Code/InterruptHandling/Riscv.cpp **** 
  73:src/Code/InterruptHandling/Riscv.cpp ****             // izvrsavamo kernel kod - kreiramo novu nit za zadatom funkcijom, njenim argumentom i 
  74:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, false);
  75:src/Code/InterruptHandling/Riscv.cpp **** 
  76:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x12) {
  77:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_exit
  78:src/Code/InterruptHandling/Riscv.cpp **** 
  79:src/Code/InterruptHandling/Riscv.cpp ****             // za tekucu nit se postavlja flag da je ona zavrsena, pa se zato ona nece vise davati 
  80:src/Code/InterruptHandling/Riscv.cpp ****             TCB::runningThread->setFinished(true);
  81:src/Code/InterruptHandling/Riscv.cpp ****             // kada se ugasi tekuca nit, treba da se promeni kontekst kako bi procesor dobio neku d
  82:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
  83:src/Code/InterruptHandling/Riscv.cpp **** 
  84:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x13) {
  85:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_dispatch
  86:src/Code/InterruptHandling/Riscv.cpp **** 
  87:src/Code/InterruptHandling/Riscv.cpp ****             // u okviru staticke metode dispatch se menja kontekst;
  88:src/Code/InterruptHandling/Riscv.cpp ****             // cuvanje i restauraciju registara radimo u okviru prekidne rutine supervisorTrap
  89:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
  90:src/Code/InterruptHandling/Riscv.cpp **** 
  91:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x14) {
  92:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create_cpp
  93:src/Code/InterruptHandling/Riscv.cpp **** 
  94:src/Code/InterruptHandling/Riscv.cpp ****             TCB** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost pokazivaca ko
  95:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
  96:src/Code/InterruptHandling/Riscv.cpp ****             void (*startRoutine)(void*); // ovde cemo smestiti adresu funkcije koju novokreirana ni
  97:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
  98:src/Code/InterruptHandling/Riscv.cpp ****             void* arg; // ovde smestamo adresu argumenta koji treba proslediti funkciji cija je adr
  99:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
 100:src/Code/InterruptHandling/Riscv.cpp ****             void* stack; // ovde smestamo adresu steka koji je alociran za nit koju treba napraviti
 101:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
GAS LISTING /tmp/ccwpPJqp.s 			page 8


 102:src/Code/InterruptHandling/Riscv.cpp **** 
 103:src/Code/InterruptHandling/Riscv.cpp ****             // izvrsavamo kernel kod - kreiramo novu nit za zadatom funkcijom, njenim argumentom i 
 104:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, true);
 105:src/Code/InterruptHandling/Riscv.cpp **** 
 106:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x15) {
 107:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: scheduler_put
 108:src/Code/InterruptHandling/Riscv.cpp **** 
 109:src/Code/InterruptHandling/Riscv.cpp ****             TCB* thread;
 110:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[thread],8(sp)" : [thread] "=r"(thread)); // citanje iz registra
 111:src/Code/InterruptHandling/Riscv.cpp **** 
 112:src/Code/InterruptHandling/Riscv.cpp ****             // stavljanje ove niti u scheduler
 113:src/Code/InterruptHandling/Riscv.cpp ****             Scheduler::getInstance().put(thread);
 114:src/Code/InterruptHandling/Riscv.cpp **** 
 115:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x16) {
 116:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getThreadId
 117:src/Code/InterruptHandling/Riscv.cpp **** 
 118:src/Code/InterruptHandling/Riscv.cpp ****             int volatile threadId = TCB::runningThread->getThreadId();
 119:src/Code/InterruptHandling/Riscv.cpp **** 
 120:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 121:src/Code/InterruptHandling/Riscv.cpp **** 
 122:src/Code/InterruptHandling/Riscv.cpp ****             // upisujemo adresu te memorije u registar a0 kao povratnu vrednost ovog sistemskog poz
 123:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[threadId]" : : [threadId] "r"(threadId));
 124:src/Code/InterruptHandling/Riscv.cpp **** 
 125:src/Code/InterruptHandling/Riscv.cpp ****         }
 126:src/Code/InterruptHandling/Riscv.cpp ****         else if (sysCallCode == 0x21) {
 127:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_open
 128:src/Code/InterruptHandling/Riscv.cpp **** 
 129:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost p
 130:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 131:src/Code/InterruptHandling/Riscv.cpp ****             uint16 initialSemaphoreValue; // pocetna vrednost semafora
 132:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[initialSemaphoreValue],16(sp)" : [initialSemaphoreValue] "=r"(i
 133:src/Code/InterruptHandling/Riscv.cpp **** 
 134:src/Code/InterruptHandling/Riscv.cpp ****             // izvrsavamo kernel kod - kreiramo nov semafor sa zadatom pocetnom vrednoscu
 135:src/Code/InterruptHandling/Riscv.cpp ****             *handle = KernelSemaphore::createSemaphore(initialSemaphoreValue);
 136:src/Code/InterruptHandling/Riscv.cpp **** 
 137:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x22) {
 138:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_close
 139:src/Code/InterruptHandling/Riscv.cpp **** 
 140:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* handle; // ovde ce biti smestena adresa semafora kojeg treba oslobodit
 141:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 142:src/Code/InterruptHandling/Riscv.cpp **** 
 143:src/Code/InterruptHandling/Riscv.cpp ****             // oslobadjamo zadati semafor
 144:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = KernelSemaphore::closeSemaphore(handle);
 145:src/Code/InterruptHandling/Riscv.cpp ****             // upisujemo informaciju o uspehu ove operacije u registar a0 kao povratnu vrednost ovo
 146:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
 147:src/Code/InterruptHandling/Riscv.cpp **** 
 148:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x23) {
 149:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_wait
 150:src/Code/InterruptHandling/Riscv.cpp **** 
 151:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* semaphoreId; // ovde ce biti smestena adresa semafora za koji treba da
 152:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 153:src/Code/InterruptHandling/Riscv.cpp **** 
 154:src/Code/InterruptHandling/Riscv.cpp ****             // za prosledjeni semafor se zove metod wait nad tekucom niti
 155:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->wait();
 156:src/Code/InterruptHandling/Riscv.cpp **** 
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 158:src/Code/InterruptHandling/Riscv.cpp ****             else __asm__ volatile ("li a0,1"); // slucaj kada je nit odblokirana normalno pomocu si
GAS LISTING /tmp/ccwpPJqp.s 			page 9


 159:src/Code/InterruptHandling/Riscv.cpp **** 
 160:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x24) {
 161:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_signal
 162:src/Code/InterruptHandling/Riscv.cpp **** 
 163:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* semaphoreId; // ovde ce biti smestena adresa semafora za koji treba da
 164:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 165:src/Code/InterruptHandling/Riscv.cpp **** 
 166:src/Code/InterruptHandling/Riscv.cpp ****             // za prosledjeni semafor se zove metod signal
 167:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->signal();
 168:src/Code/InterruptHandling/Riscv.cpp **** 
 169:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x31) {
 170:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: time_sleep
 171:src/Code/InterruptHandling/Riscv.cpp **** 
 172:src/Code/InterruptHandling/Riscv.cpp ****             uint64 time; // broj perioda tajmera na koliko treba da se uspava tekuca nit
 173:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[time], 8(sp)" : [time] "=r"(time)); // citanje iz registra a1
 174:src/Code/InterruptHandling/Riscv.cpp **** 
 175:src/Code/InterruptHandling/Riscv.cpp ****             // umetanje tekuce niti u red uspavanih niti sa zadatim brojem perioda tajmera koliko t
 176:src/Code/InterruptHandling/Riscv.cpp ****             TCB::insertSleepThread(time);
 177:src/Code/InterruptHandling/Riscv.cpp ****             // tekucu nit treba suspendovati tako sto cemo promeniti kontekst bez vracanja tekuce n
 178:src/Code/InterruptHandling/Riscv.cpp ****             TCB::suspendCurrentThread();
 179:src/Code/InterruptHandling/Riscv.cpp **** 
 180:src/Code/InterruptHandling/Riscv.cpp ****             // operacija umetanja uspavane niti u listu uvek uspeva jer ne alociram dodatnu memorij
 181:src/Code/InterruptHandling/Riscv.cpp ****             // uvezujem u listu koju simuliram pomocu pokazivaca koji su atributi klase TCB
 182:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("li a0,1");
 183:src/Code/InterruptHandling/Riscv.cpp **** 
 184:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x41) {
 185:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getc
 186:src/Code/InterruptHandling/Riscv.cpp **** 
 187:src/Code/InterruptHandling/Riscv.cpp ****             char inputCharacter = KernelBuffer::getcGetInstance()->removeFromBuffer();
 188:src/Code/InterruptHandling/Riscv.cpp ****             // rezultat ovog sistemskog poziva (uneti karakter) vracamo kroz registar a0
 189:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[inputCharacter]" : : [inputCharacter] "r"(inputCharacter));
 190:src/Code/InterruptHandling/Riscv.cpp **** 
 191:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x42) {
 192:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: putc
 193:src/Code/InterruptHandling/Riscv.cpp **** 
 194:src/Code/InterruptHandling/Riscv.cpp ****             char outputCharacter;
 195:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[outputCharacter], 8(sp)" : [outputCharacter] "=r"(outputCharact
 196:src/Code/InterruptHandling/Riscv.cpp **** 
 197:src/Code/InterruptHandling/Riscv.cpp ****             KernelBuffer::putcGetInstance()->insertIntoBuffer(outputCharacter);
 198:src/Code/InterruptHandling/Riscv.cpp **** 
 199:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x50) {
 200:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchSupervisorToUser
 201:src/Code/InterruptHandling/Riscv.cpp **** 
 202:src/Code/InterruptHandling/Riscv.cpp ****             Riscv::maskClearBitsSstatus(Riscv::SSTATUS_SPP);
 203:src/Code/InterruptHandling/Riscv.cpp **** 
 204:src/Code/InterruptHandling/Riscv.cpp ****         } else if (sysCallCode == 0x51) {
 205:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchUserToSupervisor
 206:src/Code/InterruptHandling/Riscv.cpp **** 
 207:src/Code/InterruptHandling/Riscv.cpp ****             Riscv::maskSetBitsSstatus(Riscv::SSTATUS_SPP);
 208:src/Code/InterruptHandling/Riscv.cpp **** 
 209:src/Code/InterruptHandling/Riscv.cpp ****         }
 210:src/Code/InterruptHandling/Riscv.cpp **** 
 211:src/Code/InterruptHandling/Riscv.cpp ****         // pre ulaska u handleSupervisorTrap() u prekidnoj rutini (supervisorTrap) su sacuvane star
 212:src/Code/InterruptHandling/Riscv.cpp ****         // nakon izlaska iz ove funkcije (handleSupervisorTrap), restarurirala bi se stara vrednost
 213:src/Code/InterruptHandling/Riscv.cpp ****         // u registru a0 nakon povratka iz prekidne rutine, vec zelimo da se upise povratna vrednos
 214:src/Code/InterruptHandling/Riscv.cpp ****         // sistemskog poziva preko stare vrednosti a0 koja se nalazi na steku, i na taj nacin ce se
 215:src/Code/InterruptHandling/Riscv.cpp ****         // nakon izlaska iz funkcije handleSupervisorTrap
GAS LISTING /tmp/ccwpPJqp.s 			page 10


 216:src/Code/InterruptHandling/Riscv.cpp ****         __asm__ volatile ("sd a0,10*8(s0)"); // a0 je zapravo registar x10 - pise u dokumentaciji
 217:src/Code/InterruptHandling/Riscv.cpp **** 
 218:src/Code/InterruptHandling/Riscv.cpp ****         // restauracija registara sepc i sstatus sa steka tekuce niti
 219:src/Code/InterruptHandling/Riscv.cpp ****         writeSepc(sepc);
 220:src/Code/InterruptHandling/Riscv.cpp ****         if (sysCallCode != 0x50 && sysCallCode != 0x51) {
 221:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 222:src/Code/InterruptHandling/Riscv.cpp ****         }
 223:src/Code/InterruptHandling/Riscv.cpp **** 
 224:src/Code/InterruptHandling/Riscv.cpp ****     } else if (scause == 0x0000000000000002UL) {
 105              		.loc 1 224 12 is_stmt 1
 106              	.LBB330:
 107              	.LBB93:
 108              		.loc 1 224 23 is_stmt 0
 109 006c 033784FD 		ld	a4,-40(s0)
 110              		.loc 1 224 12
 111 0070 93072000 		li	a5,2
 112 0074 6306F738 		beq	a4,a5,.L33
 113              	.LBE93:
 114              	.LBE330:
 225:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): ne; razlog prekida: ilegalna instrukcija
 226:src/Code/InterruptHandling/Riscv.cpp **** 
 227:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 228:src/Code/InterruptHandling/Riscv.cpp ****     } else if (scause == 0x0000000000000005UL) {
 115              		.loc 1 228 12 is_stmt 1
 116              	.LBB331:
 117              	.LBB143:
 118              	.LBB94:
 119              		.loc 1 228 23 is_stmt 0
 120 0078 033784FD 		ld	a4,-40(s0)
 121              		.loc 1 228 12
 122 007c 93075000 		li	a5,5
 123 0080 6304F73A 		beq	a4,a5,.L34
 124              	.LBE94:
 125              	.LBE143:
 126              	.LBE331:
 229:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): ne; razlog prekida: nedozvoljena adresa citanja
 230:src/Code/InterruptHandling/Riscv.cpp **** 
 231:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 232:src/Code/InterruptHandling/Riscv.cpp ****     } else if (scause == 0x0000000000000007UL) {
 127              		.loc 1 232 12 is_stmt 1
 128              	.LBB332:
 129              	.LBB144:
 130              	.LBB135:
 131              	.LBB95:
 132              		.loc 1 232 23 is_stmt 0
 133 0084 033784FD 		ld	a4,-40(s0)
 134              		.loc 1 232 12
 135 0088 93077000 		li	a5,7
 136 008c 6302F73C 		beq	a4,a5,.L35
 137              	.LBE95:
 138              	.LBE135:
 139              	.LBE144:
 140              	.LBE332:
 233:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): ne; razlog prekida: nedozvoljena adresa upisa
 234:src/Code/InterruptHandling/Riscv.cpp **** 
 235:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 236:src/Code/InterruptHandling/Riscv.cpp ****     } else if (scause == 0x8000000000000001UL) {
GAS LISTING /tmp/ccwpPJqp.s 			page 11


 141              		.loc 1 236 12 is_stmt 1
 142              	.LBB333:
 143              	.LBB145:
 144              	.LBB136:
 145              	.LBB128:
 146              	.LBB96:
 147              		.loc 1 236 23 is_stmt 0
 148 0090 033784FD 		ld	a4,-40(s0)
 149              		.loc 1 236 12
 150 0094 9307F0FF 		li	a5,-1
 151 0098 9397F703 		slli	a5,a5,63
 152 009c 93871700 		addi	a5,a5,1
 153 00a0 630CF73C 		beq	a4,a5,.L36
 154              	.LBE96:
 155              	.LBE128:
 156              	.LBE136:
 157              	.LBE145:
 158              	.LBE333:
 237:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): da; razlog prekida: softverski prekid od tajmera
 238:src/Code/InterruptHandling/Riscv.cpp **** 
 239:src/Code/InterruptHandling/Riscv.cpp ****         maskClearBitsSip(SIP_SSIP); // brise se zahtev za prekidom od tajmera
 240:src/Code/InterruptHandling/Riscv.cpp ****         TCB::updateSleepThreadList(); // azuriranje liste uspavanih niti
 241:src/Code/InterruptHandling/Riscv.cpp ****         TCB::timeSliceCounter++; // povecava se brojac perioda tajmera za tekucu nit (runningThread
 242:src/Code/InterruptHandling/Riscv.cpp ****         // ako se tekuca nit izvrsavala dovoljno perioda tajmera - promeniti kontekst
 243:src/Code/InterruptHandling/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::runningThread->getTimeSlice()) {
 244:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sepc = readSepc();
 245:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sstatus = readSstatus();
 246:src/Code/InterruptHandling/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 247:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch(); // promena konteksta
 248:src/Code/InterruptHandling/Riscv.cpp ****             writeSepc(sepc);
 249:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 250:src/Code/InterruptHandling/Riscv.cpp ****         }
 251:src/Code/InterruptHandling/Riscv.cpp **** 
 252:src/Code/InterruptHandling/Riscv.cpp ****     } else if (scause == 0x8000000000000009UL) {
 159              		.loc 1 252 12 is_stmt 1
 160              	.LBB334:
 161              	.LBB146:
 162              	.LBB137:
 163              	.LBB129:
 164              	.LBB122:
 165              	.LBB97:
 166              		.loc 1 252 23 is_stmt 0
 167 00a4 033784FD 		ld	a4,-40(s0)
 168              		.loc 1 252 12
 169 00a8 9307F0FF 		li	a5,-1
 170 00ac 9397F703 		slli	a5,a5,63
 171 00b0 93879700 		addi	a5,a5,9
 172 00b4 6310F718 		bne	a4,a5,.L25
 173              	.LBB98:
 253:src/Code/InterruptHandling/Riscv.cpp ****         // spoljasnji prekid (tajmer ili konzola): da; razlog prekida: spoljasnji hardverski prekid
 254:src/Code/InterruptHandling/Riscv.cpp **** 
 255:src/Code/InterruptHandling/Riscv.cpp ****         // od kontrolera prekida saznajemo koji uredjaj je generisao prekid pozivajuci funkciju pli
 256:src/Code/InterruptHandling/Riscv.cpp ****         int externalInterruptCode = plic_claim();
 174              		.loc 1 256 9 is_stmt 1
 175              		.loc 1 256 47 is_stmt 0
 176 00b8 97000000 		call	plic_claim@plt
 176      E7800000 
GAS LISTING /tmp/ccwpPJqp.s 			page 12


 177              	.LVL1:
 178 00c0 13090500 		mv	s2,a0
 179              	.LVL2:
 257:src/Code/InterruptHandling/Riscv.cpp **** 
 258:src/Code/InterruptHandling/Riscv.cpp ****         if (externalInterruptCode == CONSOLE_IRQ) {
 180              		.loc 1 258 9 is_stmt 1
 181              	.LBB99:
 182 00c4 9307A000 		li	a5,10
 183 00c8 6308F542 		beq	a0,a5,.L30
 184              	.LVL3:
 185              	.L29:
 186              	.LBE99:
 259:src/Code/InterruptHandling/Riscv.cpp ****             // prekid od konzole
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 261:src/Code/InterruptHandling/Riscv.cpp ****                 int consoleInput = *reinterpret_cast<char*>(CONSOLE_RX_DATA);
 262:src/Code/InterruptHandling/Riscv.cpp ****                 KernelBuffer::getcGetInstance()->insertIntoBuffer(consoleInput);
 263:src/Code/InterruptHandling/Riscv.cpp ****             }
 264:src/Code/InterruptHandling/Riscv.cpp **** 
 265:src/Code/InterruptHandling/Riscv.cpp ****         }
 266:src/Code/InterruptHandling/Riscv.cpp **** 
 267:src/Code/InterruptHandling/Riscv.cpp ****         // kontroler prekida se obavestava da je prekid obradjen
 268:src/Code/InterruptHandling/Riscv.cpp ****         plic_complete(externalInterruptCode);
 187              		.loc 1 268 9
 188              		.loc 1 268 22 is_stmt 0
 189 00cc 13050900 		mv	a0,s2
 190 00d0 97000000 		call	plic_complete@plt
 190      E7800000 
 191              	.LVL4:
 269:src/Code/InterruptHandling/Riscv.cpp ****         maskClearBitsSip(SIP_SEIP); // brise se zahtev za spoljasnjim hardverskim prekidom
 192              		.loc 1 269 9 is_stmt 1
 193              	.LBB102:
 194              	.LBB103:
 152:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 195              		.loc 2 152 5
 152:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 196              		.loc 2 152 64 is_stmt 0
 197 00d8 93070020 		li	a5,512
 198              	#APP
 199              	# 152 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 153:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 200              		csrc sip, a5
 201              	# 0 "" 2
 202              		.loc 2 153 1
 203              	#NO_APP
 204 00e0 6F004015 		j	.L25
 205              	.LVL5:
 206              	.L4:
 207              	.LBE103:
 208              	.LBE102:
 209              	.LBE98:
 210              	.LBE97:
 211              	.LBE122:
 212              	.LBE129:
 213              	.LBE137:
 214              	.LBE146:
 215              	.LBB147:
  31:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sstatus = readSstatus();
GAS LISTING /tmp/ccwpPJqp.s 			page 13


 216              		.loc 1 31 9 is_stmt 1
 217              	.LBB148:
 218              	.LBB149:
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 219              		.loc 2 184 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 220              		.loc 2 185 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 221              		.loc 2 185 64 is_stmt 0
 222              	#APP
 223              	# 185 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 224              		csrr a5, sepc
 225              	# 0 "" 2
 226              	#NO_APP
 227 00e8 2338F4F8 		sd	a5,-112(s0)
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 228              		.loc 2 186 5 is_stmt 1
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 229              		.loc 2 186 12 is_stmt 0
 230 00ec 833704F9 		ld	a5,-112(s0)
 231              	.LBE149:
 232              	.LBE148:
  31:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sstatus = readSstatus();
 233              		.loc 1 31 43
 234 00f0 93874700 		addi	a5,a5,4
  31:src/Code/InterruptHandling/Riscv.cpp ****         uint64 volatile sstatus = readSstatus();
 235              		.loc 1 31 45
 236 00f4 2334F4F4 		sd	a5,-184(s0)
  32:src/Code/InterruptHandling/Riscv.cpp **** 
 237              		.loc 1 32 9 is_stmt 1
 238              	.LBB150:
 239              	.LBB151:
 120:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 240              		.loc 2 120 5
 121:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sstatus;
 241              		.loc 2 121 5
 121:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sstatus;
 242              		.loc 2 121 76 is_stmt 0
 243              	#APP
 244              	# 121 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 245              		csrr a5, sstatus
 246              	# 0 "" 2
 247              	#NO_APP
 248 00fc 2334F4F8 		sd	a5,-120(s0)
 122:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 249              		.loc 2 122 5 is_stmt 1
 122:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 250              		.loc 2 122 12 is_stmt 0
 251 0100 833784F8 		ld	a5,-120(s0)
 252              	.LBE151:
 253              	.LBE150:
  32:src/Code/InterruptHandling/Riscv.cpp **** 
 254              		.loc 1 32 47
 255 0104 2338F4F4 		sd	a5,-176(s0)
  34:src/Code/InterruptHandling/Riscv.cpp ****         __asm__ volatile ("ld %[sysCallCode],0(sp)" : [sysCallCode] "=r"(sysCallCode));
 256              		.loc 1 34 9 is_stmt 1
  35:src/Code/InterruptHandling/Riscv.cpp **** 
GAS LISTING /tmp/ccwpPJqp.s 			page 14


 257              		.loc 1 35 9
  35:src/Code/InterruptHandling/Riscv.cpp **** 
 258              		.loc 1 35 87 is_stmt 0
 259              	#APP
 260              	# 35 "src/Code/InterruptHandling/Riscv.cpp" 1
 261              		ld a5,0(sp)
 262              	# 0 "" 2
 263              	#NO_APP
 264 010c 233CF4F4 		sd	a5,-168(s0)
  37:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_alloc
 265              		.loc 1 37 9 is_stmt 1
 266              	.LBB152:
  37:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_alloc
 267              		.loc 1 37 25 is_stmt 0
 268 0110 033784F5 		ld	a4,-168(s0)
  37:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_alloc
 269              		.loc 1 37 9
 270 0114 93071000 		li	a5,1
 271 0118 6308F70C 		beq	a4,a5,.L37
 272              	.LBE152:
 273              	.LBE147:
 274              	.LBE334:
  49:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_free
 275              		.loc 1 49 16 is_stmt 1
 276              	.LBB335:
 277              	.LBB314:
 278              	.LBB295:
 279              	.LBB153:
  49:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_free
 280              		.loc 1 49 32 is_stmt 0
 281 011c 033784F5 		ld	a4,-168(s0)
  49:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: mem_free
 282              		.loc 1 49 16
 283 0120 93072000 		li	a5,2
 284 0124 6306F712 		beq	a4,a5,.L38
 285              	.LBE153:
 286              	.LBE295:
 287              	.LBE314:
 288              	.LBE335:
  61:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create
 289              		.loc 1 61 16 is_stmt 1
 290              	.LBB336:
 291              	.LBB315:
 292              	.LBB296:
 293              	.LBB280:
 294              	.LBB154:
  61:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create
 295              		.loc 1 61 32 is_stmt 0
 296 0128 033784F5 		ld	a4,-168(s0)
  61:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create
 297              		.loc 1 61 16
 298 012c 93071001 		li	a5,17
 299 0130 6302F714 		beq	a4,a5,.L39
 300              	.LBE154:
 301              	.LBE280:
 302              	.LBE296:
 303              	.LBE315:
GAS LISTING /tmp/ccwpPJqp.s 			page 15


 304              	.LBE336:
  76:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_exit
 305              		.loc 1 76 16 is_stmt 1
 306              	.LBB337:
 307              	.LBB316:
 308              	.LBB297:
 309              	.LBB281:
 310              	.LBB266:
 311              	.LBB155:
  76:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_exit
 312              		.loc 1 76 32 is_stmt 0
 313 0134 033784F5 		ld	a4,-168(s0)
  76:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_exit
 314              		.loc 1 76 16
 315 0138 93072001 		li	a5,18
 316 013c 630EF714 		beq	a4,a5,.L40
 317              	.LBE155:
 318              	.LBE266:
 319              	.LBE281:
 320              	.LBE297:
 321              	.LBE316:
 322              	.LBE337:
  84:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_dispatch
 323              		.loc 1 84 16 is_stmt 1
 324              	.LBB338:
 325              	.LBB317:
 326              	.LBB298:
 327              	.LBB282:
 328              	.LBB267:
 329              	.LBB253:
 330              	.LBB156:
  84:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_dispatch
 331              		.loc 1 84 32 is_stmt 0
 332 0140 033784F5 		ld	a4,-168(s0)
  84:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_dispatch
 333              		.loc 1 84 16
 334 0144 93073001 		li	a5,19
 335 0148 6308F716 		beq	a4,a5,.L41
 336              	.LBE156:
 337              	.LBE253:
 338              	.LBE267:
 339              	.LBE282:
 340              	.LBE298:
 341              	.LBE317:
 342              	.LBE338:
  91:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create_cpp
 343              		.loc 1 91 16 is_stmt 1
 344              	.LBB339:
 345              	.LBB318:
 346              	.LBB299:
 347              	.LBB283:
 348              	.LBB268:
 349              	.LBB254:
 350              	.LBB240:
 351              	.LBB157:
  91:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create_cpp
 352              		.loc 1 91 32 is_stmt 0
GAS LISTING /tmp/ccwpPJqp.s 			page 16


 353 014c 033784F5 		ld	a4,-168(s0)
  91:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: thread_create_cpp
 354              		.loc 1 91 16
 355 0150 93074001 		li	a5,20
 356 0154 6308F716 		beq	a4,a5,.L42
 357              	.LBE157:
 358              	.LBE240:
 359              	.LBE254:
 360              	.LBE268:
 361              	.LBE283:
 362              	.LBE299:
 363              	.LBE318:
 364              	.LBE339:
 106:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: scheduler_put
 365              		.loc 1 106 16 is_stmt 1
 366              	.LBB340:
 367              	.LBB319:
 368              	.LBB300:
 369              	.LBB284:
 370              	.LBB269:
 371              	.LBB255:
 372              	.LBB241:
 373              	.LBB230:
 374              	.LBB158:
 106:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: scheduler_put
 375              		.loc 1 106 32 is_stmt 0
 376 0158 033784F5 		ld	a4,-168(s0)
 106:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: scheduler_put
 377              		.loc 1 106 16
 378 015c 93075001 		li	a5,21
 379 0160 6304F718 		beq	a4,a5,.L43
 380              	.LBE158:
 381              	.LBE230:
 382              	.LBE241:
 383              	.LBE255:
 384              	.LBE269:
 385              	.LBE284:
 386              	.LBE300:
 387              	.LBE319:
 388              	.LBE340:
 115:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getThreadId
 389              		.loc 1 115 16 is_stmt 1
 390              	.LBB341:
 391              	.LBB320:
 392              	.LBB301:
 393              	.LBB285:
 394              	.LBB270:
 395              	.LBB256:
 396              	.LBB242:
 397              	.LBB231:
 398              	.LBB220:
 399              	.LBB159:
 115:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getThreadId
 400              		.loc 1 115 32 is_stmt 0
 401 0164 033784F5 		ld	a4,-168(s0)
 115:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getThreadId
 402              		.loc 1 115 16
GAS LISTING /tmp/ccwpPJqp.s 			page 17


 403 0168 93076001 		li	a5,22
 404 016c 630CF718 		beq	a4,a5,.L44
 405              	.LBE159:
 406              	.LBE220:
 407              	.LBE231:
 408              	.LBE242:
 409              	.LBE256:
 410              	.LBE270:
 411              	.LBE285:
 412              	.LBE301:
 413              	.LBE320:
 414              	.LBE341:
 126:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_open
 415              		.loc 1 126 14 is_stmt 1
 416              	.LBB342:
 417              	.LBB321:
 418              	.LBB302:
 419              	.LBB286:
 420              	.LBB271:
 421              	.LBB257:
 422              	.LBB243:
 423              	.LBB232:
 424              	.LBB221:
 425              	.LBB211:
 426              	.LBB160:
 126:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_open
 427              		.loc 1 126 30 is_stmt 0
 428 0170 033784F5 		ld	a4,-168(s0)
 126:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_open
 429              		.loc 1 126 14
 430 0174 93071002 		li	a5,33
 431 0178 630AF71A 		beq	a4,a5,.L45
 432              	.LBE160:
 433              	.LBE211:
 434              	.LBE221:
 435              	.LBE232:
 436              	.LBE243:
 437              	.LBE257:
 438              	.LBE271:
 439              	.LBE286:
 440              	.LBE302:
 441              	.LBE321:
 442              	.LBE342:
 137:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_close
 443              		.loc 1 137 16 is_stmt 1
 444              	.LBB343:
 445              	.LBB322:
 446              	.LBB303:
 447              	.LBB287:
 448              	.LBB272:
 449              	.LBB258:
 450              	.LBB244:
 451              	.LBB233:
 452              	.LBB222:
 453              	.LBB212:
 454              	.LBB201:
 455              	.LBB161:
GAS LISTING /tmp/ccwpPJqp.s 			page 18


 137:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_close
 456              		.loc 1 137 32 is_stmt 0
 457 017c 033784F5 		ld	a4,-168(s0)
 137:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_close
 458              		.loc 1 137 16
 459 0180 93072002 		li	a5,34
 460 0184 6304F71C 		beq	a4,a5,.L46
 461              	.LBE161:
 462              	.LBE201:
 463              	.LBE212:
 464              	.LBE222:
 465              	.LBE233:
 466              	.LBE244:
 467              	.LBE258:
 468              	.LBE272:
 469              	.LBE287:
 470              	.LBE303:
 471              	.LBE322:
 472              	.LBE343:
 148:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_wait
 473              		.loc 1 148 16 is_stmt 1
 474              	.LBB344:
 475              	.LBB323:
 476              	.LBB304:
 477              	.LBB288:
 478              	.LBB273:
 479              	.LBB259:
 480              	.LBB245:
 481              	.LBB234:
 482              	.LBB223:
 483              	.LBB213:
 484              	.LBB202:
 485              	.LBB194:
 486              	.LBB162:
 148:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_wait
 487              		.loc 1 148 32 is_stmt 0
 488 0188 033784F5 		ld	a4,-168(s0)
 148:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_wait
 489              		.loc 1 148 16
 490 018c 93073002 		li	a5,35
 491 0190 6308F71C 		beq	a4,a5,.L47
 492              	.LBE162:
 493              	.LBE194:
 494              	.LBE202:
 495              	.LBE213:
 496              	.LBE223:
 497              	.LBE234:
 498              	.LBE245:
 499              	.LBE259:
 500              	.LBE273:
 501              	.LBE288:
 502              	.LBE304:
 503              	.LBE323:
 504              	.LBE344:
 160:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_signal
 505              		.loc 1 160 16 is_stmt 1
 506              	.LBB345:
GAS LISTING /tmp/ccwpPJqp.s 			page 19


 507              	.LBB324:
 508              	.LBB305:
 509              	.LBB289:
 510              	.LBB274:
 511              	.LBB260:
 512              	.LBB246:
 513              	.LBB235:
 514              	.LBB224:
 515              	.LBB214:
 516              	.LBB203:
 517              	.LBB195:
 518              	.LBB188:
 519              	.LBB163:
 160:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_signal
 520              		.loc 1 160 32 is_stmt 0
 521 0194 033784F5 		ld	a4,-168(s0)
 160:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: sem_signal
 522              		.loc 1 160 16
 523 0198 93074002 		li	a5,36
 524 019c 630AF71E 		beq	a4,a5,.L48
 525              	.LBE163:
 526              	.LBE188:
 527              	.LBE195:
 528              	.LBE203:
 529              	.LBE214:
 530              	.LBE224:
 531              	.LBE235:
 532              	.LBE246:
 533              	.LBE260:
 534              	.LBE274:
 535              	.LBE289:
 536              	.LBE305:
 537              	.LBE324:
 538              	.LBE345:
 169:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: time_sleep
 539              		.loc 1 169 16 is_stmt 1
 540              	.LBB346:
 541              	.LBB325:
 542              	.LBB306:
 543              	.LBB290:
 544              	.LBB275:
 545              	.LBB261:
 546              	.LBB247:
 547              	.LBB236:
 548              	.LBB225:
 549              	.LBB215:
 550              	.LBB204:
 551              	.LBB196:
 552              	.LBB189:
 553              	.LBB181:
 554              	.LBB164:
 169:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: time_sleep
 555              		.loc 1 169 32 is_stmt 0
 556 01a0 033784F5 		ld	a4,-168(s0)
 169:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: time_sleep
 557              		.loc 1 169 16
 558 01a4 93071003 		li	a5,49
GAS LISTING /tmp/ccwpPJqp.s 			page 20


 559 01a8 630CF71E 		beq	a4,a5,.L49
 560              	.LBE164:
 561              	.LBE181:
 562              	.LBE189:
 563              	.LBE196:
 564              	.LBE204:
 565              	.LBE215:
 566              	.LBE225:
 567              	.LBE236:
 568              	.LBE247:
 569              	.LBE261:
 570              	.LBE275:
 571              	.LBE290:
 572              	.LBE306:
 573              	.LBE325:
 574              	.LBE346:
 184:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getc
 575              		.loc 1 184 16 is_stmt 1
 576              	.LBB347:
 577              	.LBB326:
 578              	.LBB307:
 579              	.LBB291:
 580              	.LBB276:
 581              	.LBB262:
 582              	.LBB248:
 583              	.LBB237:
 584              	.LBB226:
 585              	.LBB216:
 586              	.LBB205:
 587              	.LBB197:
 588              	.LBB190:
 589              	.LBB182:
 590              	.LBB177:
 591              	.LBB165:
 184:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getc
 592              		.loc 1 184 32 is_stmt 0
 593 01ac 033784F5 		ld	a4,-168(s0)
 184:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: getc
 594              		.loc 1 184 16
 595 01b0 93071004 		li	a5,65
 596 01b4 6304F720 		beq	a4,a5,.L50
 597              	.LBE165:
 598              	.LBE177:
 599              	.LBE182:
 600              	.LBE190:
 601              	.LBE197:
 602              	.LBE205:
 603              	.LBE216:
 604              	.LBE226:
 605              	.LBE237:
 606              	.LBE248:
 607              	.LBE262:
 608              	.LBE276:
 609              	.LBE291:
 610              	.LBE307:
 611              	.LBE326:
 612              	.LBE347:
GAS LISTING /tmp/ccwpPJqp.s 			page 21


 191:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: putc
 613              		.loc 1 191 16 is_stmt 1
 614              	.LBB348:
 615              	.LBB327:
 616              	.LBB308:
 617              	.LBB292:
 618              	.LBB277:
 619              	.LBB263:
 620              	.LBB249:
 621              	.LBB238:
 622              	.LBB227:
 623              	.LBB217:
 624              	.LBB206:
 625              	.LBB198:
 626              	.LBB191:
 627              	.LBB183:
 628              	.LBB178:
 629              	.LBB174:
 630              	.LBB166:
 191:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: putc
 631              		.loc 1 191 32 is_stmt 0
 632 01b8 033784F5 		ld	a4,-168(s0)
 191:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: putc
 633              		.loc 1 191 16
 634 01bc 93072004 		li	a5,66
 635 01c0 630AF720 		beq	a4,a5,.L51
 199:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchSupervisorToUser
 636              		.loc 1 199 16 is_stmt 1
 199:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchSupervisorToUser
 637              		.loc 1 199 32 is_stmt 0
 638 01c4 033784F5 		ld	a4,-168(s0)
 199:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchSupervisorToUser
 639              		.loc 1 199 16
 640 01c8 93070005 		li	a5,80
 641 01cc 6304F722 		beq	a4,a5,.L52
 204:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchUserToSupervisor
 642              		.loc 1 204 16 is_stmt 1
 204:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchUserToSupervisor
 643              		.loc 1 204 32 is_stmt 0
 644 01d0 033784F5 		ld	a4,-168(s0)
 204:src/Code/InterruptHandling/Riscv.cpp ****             // sistemski poziv: switchUserToSupervisor
 645              		.loc 1 204 16
 646 01d4 93071005 		li	a5,81
 647 01d8 6318F702 		bne	a4,a5,.L8
 207:src/Code/InterruptHandling/Riscv.cpp **** 
 648              		.loc 1 207 13 is_stmt 1
 649              	.LVL6:
 650              	.LBB167:
 651              	.LBB168:
 130:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 652              		.loc 2 130 5
 130:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 653              		.loc 2 130 68 is_stmt 0
 654 01dc 93070010 		li	a5,256
 655              	#APP
 656              	# 130 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 131:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
GAS LISTING /tmp/ccwpPJqp.s 			page 22


 657              		csrs sstatus, a5
 658              	# 0 "" 2
 659              		.loc 2 131 1
 660              	#NO_APP
 661 01e4 6F004002 		j	.L8
 662              	.LVL7:
 663              	.L37:
 664              	.LBE168:
 665              	.LBE167:
 666              	.LBE166:
 667              	.LBE174:
 668              	.LBE178:
 669              	.LBE183:
 670              	.LBE191:
 671              	.LBE198:
 672              	.LBE206:
 673              	.LBE217:
 674              	.LBE227:
 675              	.LBE238:
 676              	.LBE249:
 677              	.LBE263:
 678              	.LBE277:
 679              	.LBE292:
 680              	.LBB293:
  40:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[numberOfBlocks],8(sp)" : [numberOfBlocks] "=r"(numberOfBlocks))
 681              		.loc 1 40 13 is_stmt 1
  41:src/Code/InterruptHandling/Riscv.cpp **** 
 682              		.loc 1 41 13
  41:src/Code/InterruptHandling/Riscv.cpp **** 
 683              		.loc 1 41 100 is_stmt 0
 684              	#APP
 685              	# 41 "src/Code/InterruptHandling/Riscv.cpp" 1
 686              		ld a5,8(sp)
 687              	# 0 "" 2
 688              	#NO_APP
 689 01ec 2330F4F6 		sd	a5,-160(s0)
  44:src/Code/InterruptHandling/Riscv.cpp **** 
 690              		.loc 1 44 13 is_stmt 1
  44:src/Code/InterruptHandling/Riscv.cpp **** 
 691              		.loc 1 44 66 is_stmt 0
 692 01f0 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 692      E7800000 
 693              	.LVL8:
  44:src/Code/InterruptHandling/Riscv.cpp **** 
 694              		.loc 1 44 83
 695 01f8 833504F6 		ld	a1,-160(s0)
 696 01fc 97000000 		call	_ZN15MemoryAllocator15allocateSegmentEm@plt
 696      E7800000 
 697              	.LVL9:
  47:src/Code/InterruptHandling/Riscv.cpp **** 
 698              		.loc 1 47 13 is_stmt 1
  47:src/Code/InterruptHandling/Riscv.cpp **** 
 699              		.loc 1 47 101 is_stmt 0
 700              	#APP
 701              	# 47 "src/Code/InterruptHandling/Riscv.cpp" 1
 702              		mv a0,a0
 703              	# 0 "" 2
GAS LISTING /tmp/ccwpPJqp.s 			page 23


 704              	.LVL10:
 705              	#NO_APP
 706              	.L8:
 707              	.LBE293:
 708              	.LBE308:
 216:src/Code/InterruptHandling/Riscv.cpp **** 
 709              		.loc 1 216 9 is_stmt 1
 216:src/Code/InterruptHandling/Riscv.cpp **** 
 710              		.loc 1 216 44 is_stmt 0
 711              	#APP
 712              	# 216 "src/Code/InterruptHandling/Riscv.cpp" 1
 219:src/Code/InterruptHandling/Riscv.cpp ****         if (sysCallCode != 0x50 && sysCallCode != 0x51) {
 713              		sd a0,10*8(s0)
 714              	# 0 "" 2
 715              		.loc 1 219 9 is_stmt 1
 219:src/Code/InterruptHandling/Riscv.cpp ****         if (sysCallCode != 0x50 && sysCallCode != 0x51) {
 716              		.loc 1 219 18 is_stmt 0
 717              	#NO_APP
 718 020c 833784F4 		ld	a5,-184(s0)
 719              	.LVL11:
 720              	.LBB309:
 721              	.LBB310:
 190:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 722              		.loc 2 190 5 is_stmt 1
 190:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 723              		.loc 2 190 65 is_stmt 0
 724              	#APP
 725              	# 190 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 726              		csrw sepc, a5
 727              	# 0 "" 2
 728              	.LVL12:
 729              	#NO_APP
 730              	.LBE310:
 731              	.LBE309:
 220:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 732              		.loc 1 220 9 is_stmt 1
 220:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 733              		.loc 1 220 25 is_stmt 0
 734 0214 033784F5 		ld	a4,-168(s0)
 220:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 735              		.loc 1 220 33
 736 0218 93070005 		li	a5,80
 737 021c 630CF700 		beq	a4,a5,.L25
 220:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 738              		.loc 1 220 48 discriminator 1
 739 0220 033784F5 		ld	a4,-168(s0)
 220:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 740              		.loc 1 220 33 discriminator 1
 741 0224 93071005 		li	a5,81
 742 0228 6306F700 		beq	a4,a5,.L25
 221:src/Code/InterruptHandling/Riscv.cpp ****         }
 743              		.loc 1 221 13 is_stmt 1
 221:src/Code/InterruptHandling/Riscv.cpp ****         }
 744              		.loc 1 221 25 is_stmt 0
 745 022c 833704F5 		ld	a5,-176(s0)
 746              	.LVL13:
 747              	.LBB311:
GAS LISTING /tmp/ccwpPJqp.s 			page 24


 748              	.LBB312:
 126:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 749              		.loc 2 126 5 is_stmt 1
 126:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 750              		.loc 2 126 77 is_stmt 0
 751              	#APP
 752              	# 126 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 753              		csrw sstatus, a5
 754              	# 0 "" 2
 755              	.LVL14:
 756              	#NO_APP
 757              	.L25:
 758              	.LBE312:
 759              	.LBE311:
 760              	.LBE327:
 761              	.LBE348:
 270:src/Code/InterruptHandling/Riscv.cpp ****     }
 271:src/Code/InterruptHandling/Riscv.cpp **** 
 272:src/Code/InterruptHandling/Riscv.cpp ****     // ciscenje steka - vise nisu potrebni parametri sistemskog poziva/prekida/izuzetka na steku po
 273:src/Code/InterruptHandling/Riscv.cpp ****     __asm__ volatile ("addi sp,sp,64");
 762              		.loc 1 273 5 is_stmt 1
 763              		.loc 1 273 39 is_stmt 0
 764              	#APP
 765              	# 273 "src/Code/InterruptHandling/Riscv.cpp" 1
 274              	
 275:src/Code/InterruptHandling/Riscv.cpp **** }...
 766              		addi sp,sp,64
 767              	# 0 "" 2
 768              		.loc 1 275 1
 769              	#NO_APP
 770 0238 8330810B 		ld	ra,184(sp)
 771              		.cfi_remember_state
 772              		.cfi_restore 1
 773 023c 0334010B 		ld	s0,176(sp)
 774              		.cfi_restore 8
 775              		.cfi_def_cfa 2, 192
 776 0240 8334810A 		ld	s1,168(sp)
 777              		.cfi_restore 9
 778 0244 0339010A 		ld	s2,160(sp)
 779              		.cfi_restore 18
 780 0248 1301010C 		addi	sp,sp,192
 781              		.cfi_def_cfa_offset 0
 782 024c 67800000 		jr	ra
 783              	.L38:
 784              		.cfi_restore_state
 785              	.LBB349:
 786              	.LBB328:
 787              	.LBB313:
 788              	.LBB294:
 789              	.LBB278:
  52:src/Code/InterruptHandling/Riscv.cpp ****             uint64* volatile freeThisMemory; // ovde cemo smestiti adresu memorije koju treba oslob
 790              		.loc 1 52 13 is_stmt 1
  53:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[freeThisMemory],8(sp)" : [freeThisMemory] "=r"(freeThisMemory))
 791              		.loc 1 53 13
  53:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[freeThisMemory],8(sp)" : [freeThisMemory] "=r"(freeThisMemory))
 792              		.loc 1 53 100 is_stmt 0
 793              	#APP
GAS LISTING /tmp/ccwpPJqp.s 			page 25


 794              	# 53 "src/Code/InterruptHandling/Riscv.cpp" 1
 795              		ld a5,8(sp)
 796              	# 0 "" 2
 797              	#NO_APP
 798 0254 2334F4F6 		sd	a5,-152(s0)
  56:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = MemoryAllocator::getInstance().deallocateSegment(freeThisMemory);
 799              		.loc 1 56 13 is_stmt 1
  56:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = MemoryAllocator::getInstance().deallocateSegment(freeThisMemory);
 800              		.loc 1 56 60 is_stmt 0
 801 0258 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 801      E7800000 
 802              	.LVL15:
  56:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = MemoryAllocator::getInstance().deallocateSegment(freeThisMemory);
 803              		.loc 1 56 79
 804 0260 833584F6 		ld	a1,-152(s0)
 805 0264 97000000 		call	_ZN15MemoryAllocator17deallocateSegmentEPv@plt
 805      E7800000 
 806              	.LVL16:
  59:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
 807              		.loc 1 59 13 is_stmt 1
  59:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
 808              		.loc 1 59 89 is_stmt 0
 809              	#APP
 810              	# 59 "src/Code/InterruptHandling/Riscv.cpp" 1
 811              		mv a0,a0
 812              	# 0 "" 2
 813              	#NO_APP
 814              	.LBE278:
 815 0270 6FF09FF9 		j	.L8
 816              	.LVL17:
 817              	.L39:
 818              	.LBB279:
 819              	.LBB264:
  64:src/Code/InterruptHandling/Riscv.cpp ****             TCB** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost pokazivaca ko
 820              		.loc 1 64 13 is_stmt 1
  65:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 821              		.loc 1 65 13
  65:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 822              		.loc 1 65 76 is_stmt 0
 823              	#APP
 824              	# 65 "src/Code/InterruptHandling/Riscv.cpp" 1
 825              		ld s1,8(sp)
 826              	# 0 "" 2
 827              	.LVL18:
  66:src/Code/InterruptHandling/Riscv.cpp ****             void (*startRoutine)(void*); // ovde cemo smestiti adresu funkcije koju novokreirana ni
 828              		.loc 1 66 13 is_stmt 1
  67:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
 829              		.loc 1 67 13
  67:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
 830              		.loc 1 67 95 is_stmt 0
 831              	# 67 "src/Code/InterruptHandling/Riscv.cpp" 1
 832              		ld a0,16(sp)
 833              	# 0 "" 2
 834              	.LVL19:
  68:src/Code/InterruptHandling/Riscv.cpp ****             void* arg; // ovde smestamo adresu argumenta koji treba proslediti funkciji cija je adr
 835              		.loc 1 68 13 is_stmt 1
  69:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
GAS LISTING /tmp/ccwpPJqp.s 			page 26


 836              		.loc 1 69 13
  69:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
 837              		.loc 1 69 68 is_stmt 0
 838              	# 69 "src/Code/InterruptHandling/Riscv.cpp" 1
 839              		ld a1,24(sp)
 840              	# 0 "" 2
 841              	.LVL20:
  70:src/Code/InterruptHandling/Riscv.cpp ****             void* stack; // ovde smestamo adresu steka koji je alociran za nit koju treba napraviti
 842              		.loc 1 70 13 is_stmt 1
  71:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
 843              		.loc 1 71 13
  71:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
 844              		.loc 1 71 74 is_stmt 0
 845              	# 71 "src/Code/InterruptHandling/Riscv.cpp" 1
 846              		ld a2,32(sp)
 847              	# 0 "" 2
 848              	.LVL21:
  74:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, false);
 849              		.loc 1 74 13 is_stmt 1
  74:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, false);
 850              		.loc 1 74 40 is_stmt 0
 851              	#NO_APP
 852 0284 93060000 		li	a3,0
 853 0288 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 853      E7800000 
 854              	.LVL22:
  74:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, false);
 855              		.loc 1 74 21
 856 0290 23B0A400 		sd	a0,0(s1)
 857              	.LBE264:
 858 0294 6FF05FF7 		j	.L8
 859              	.LVL23:
 860              	.L40:
 861              	.LBB265:
  80:src/Code/InterruptHandling/Riscv.cpp ****             TCB::runningThread->setFinished(true);
 862              		.loc 1 80 13 is_stmt 1
  80:src/Code/InterruptHandling/Riscv.cpp ****             TCB::runningThread->setFinished(true);
 863              		.loc 1 80 44 is_stmt 0
 864 0298 97070000 		la	a5,_ZN3TCB13runningThreadE
 864      83B70700 
 865 02a0 83B70700 		ld	a5,0(a5)
 866              	.LVL24:
 867              	.LBB250:
 868              	.LBB251:
 869              		.file 3 "src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp"
   1:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** #ifndef TCB_HPP
   2:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** #define TCB_HPP
   3:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
   4:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** #include "../../../lib/hw.h"
   5:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** #include "../Scheduler/Scheduler.hpp"
   6:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** #include "../InterruptHandling/Riscv.hpp"
   7:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
   8:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** // klasa TCB predstavlja apstrakciju niti
   9:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** class TCB {
  10:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** public:
  11:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // definisanje korisnickog tipa Body - predstavljace pokazivac na void funkciju koja prima void
  12:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     using Body = void (*)(void*);
GAS LISTING /tmp/ccwpPJqp.s 			page 27


  13:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  14:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ova funkcija treba da napravi novu nit koja ce da izvrsava telo funkcije date parametrom bod
  15:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ako se prosledi nullptr, to znaci da treba napraviti nit koja ce da izvrsava main funkciju
  16:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // u tom slucaju, u konstrukciji te niti ne treba je davati scheduleru na raspolaganje, jer bi 
  17:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // zelimo da bas ta nit main-a nastavi da se izvrsava
  18:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     static TCB* createThread(Body body, void* arg, void* stack, bool cppApi);
  19:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  20:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // obezbedjena enkapsulacija - atribut finished je privatan i moze se citati samo kroz getter m
  21:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     bool getFinished() const { return finished; }
  22:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setFinished(bool value) { finished = value; }
 870              		.loc 3 22 36 is_stmt 1
 871              		.loc 3 22 45 is_stmt 0
 872 02a4 13071000 		li	a4,1
 873 02a8 2388E702 		sb	a4,48(a5)
 874              	.LVL25:
 875              	.LBE251:
 876              	.LBE250:
  82:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 877              		.loc 1 82 13 is_stmt 1
  82:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 878              		.loc 1 82 26 is_stmt 0
 879 02ac 97000000 		call	_ZN3TCB8dispatchEv@plt
 879      E7800000 
 880              	.LVL26:
 881 02b4 6FF05FF5 		j	.L8
 882              	.L41:
 883              	.LBB252:
  89:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 884              		.loc 1 89 13 is_stmt 1
  89:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 885              		.loc 1 89 26 is_stmt 0
 886 02b8 97000000 		call	_ZN3TCB8dispatchEv@plt
 886      E7800000 
 887              	.LVL27:
 888 02c0 6FF09FF4 		j	.L8
 889              	.L42:
 890              	.LBB239:
 891              	.LBB228:
  94:src/Code/InterruptHandling/Riscv.cpp ****             TCB** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost pokazivaca ko
 892              		.loc 1 94 13 is_stmt 1
  95:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 893              		.loc 1 95 13
  95:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 894              		.loc 1 95 76 is_stmt 0
 895              	#APP
 896              	# 95 "src/Code/InterruptHandling/Riscv.cpp" 1
 897              		ld s1,8(sp)
 898              	# 0 "" 2
 899              	.LVL28:
  96:src/Code/InterruptHandling/Riscv.cpp ****             void (*startRoutine)(void*); // ovde cemo smestiti adresu funkcije koju novokreirana ni
 900              		.loc 1 96 13 is_stmt 1
  97:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
 901              		.loc 1 97 13
  97:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[startRoutine],16(sp)" : [startRoutine] "=r"(startRoutine));
 902              		.loc 1 97 95 is_stmt 0
 903              	# 97 "src/Code/InterruptHandling/Riscv.cpp" 1
 904              		ld a0,16(sp)
GAS LISTING /tmp/ccwpPJqp.s 			page 28


 905              	# 0 "" 2
 906              	.LVL29:
  98:src/Code/InterruptHandling/Riscv.cpp ****             void* arg; // ovde smestamo adresu argumenta koji treba proslediti funkciji cija je adr
 907              		.loc 1 98 13 is_stmt 1
  99:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
 908              		.loc 1 99 13
  99:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[arg],24(sp)" : [arg] "=r"(arg));
 909              		.loc 1 99 68 is_stmt 0
 910              	# 99 "src/Code/InterruptHandling/Riscv.cpp" 1
 911              		ld a1,24(sp)
 912              	# 0 "" 2
 913              	.LVL30:
 100:src/Code/InterruptHandling/Riscv.cpp ****             void* stack; // ovde smestamo adresu steka koji je alociran za nit koju treba napraviti
 914              		.loc 1 100 13 is_stmt 1
 101:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
 915              		.loc 1 101 13
 101:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[stack],32(sp)" : [stack] "=r"(stack));
 916              		.loc 1 101 74 is_stmt 0
 917              	# 101 "src/Code/InterruptHandling/Riscv.cpp" 1
 918              		ld a2,32(sp)
 919              	# 0 "" 2
 920              	.LVL31:
 104:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, true);
 921              		.loc 1 104 13 is_stmt 1
 104:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, true);
 922              		.loc 1 104 40 is_stmt 0
 923              	#NO_APP
 924 02d4 93061000 		li	a3,1
 925 02d8 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_S0_b@plt
 925      E7800000 
 926              	.LVL32:
 104:src/Code/InterruptHandling/Riscv.cpp ****             *handle = TCB::createThread(startRoutine, arg, stack, true);
 927              		.loc 1 104 21
 928 02e0 23B0A400 		sd	a0,0(s1)
 929              	.LBE228:
 930 02e4 6FF05FF2 		j	.L8
 931              	.LVL33:
 932              	.L43:
 933              	.LBB229:
 934              	.LBB218:
 109:src/Code/InterruptHandling/Riscv.cpp ****             TCB* thread;
 935              		.loc 1 109 13 is_stmt 1
 110:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[thread],8(sp)" : [thread] "=r"(thread)); // citanje iz registra
 936              		.loc 1 110 13
 110:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[thread],8(sp)" : [thread] "=r"(thread)); // citanje iz registra
 937              		.loc 1 110 76 is_stmt 0
 938              	#APP
 939              	# 110 "src/Code/InterruptHandling/Riscv.cpp" 1
 940              		ld s1,8(sp)
 941              	# 0 "" 2
 942              	.LVL34:
 113:src/Code/InterruptHandling/Riscv.cpp ****             Scheduler::getInstance().put(thread);
 943              		.loc 1 113 13 is_stmt 1
 113:src/Code/InterruptHandling/Riscv.cpp ****             Scheduler::getInstance().put(thread);
 944              		.loc 1 113 36 is_stmt 0
 945              	#NO_APP
 946 02ec 97000000 		call	_ZN9Scheduler11getInstanceEv@plt
GAS LISTING /tmp/ccwpPJqp.s 			page 29


 946      E7800000 
 947              	.LVL35:
 113:src/Code/InterruptHandling/Riscv.cpp ****             Scheduler::getInstance().put(thread);
 948              		.loc 1 113 41
 949 02f4 93850400 		mv	a1,s1
 950 02f8 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 950      E7800000 
 951              	.LVL36:
 952              	.LBE218:
 953 0300 6FF09FF0 		j	.L8
 954              	.LVL37:
 955              	.L44:
 956              	.LBB219:
 957              	.LBB207:
 118:src/Code/InterruptHandling/Riscv.cpp ****             int volatile threadId = TCB::runningThread->getThreadId();
 958              		.loc 1 118 13 is_stmt 1
 118:src/Code/InterruptHandling/Riscv.cpp ****             int volatile threadId = TCB::runningThread->getThreadId();
 959              		.loc 1 118 68 is_stmt 0
 960 0304 97070000 		la	a5,_ZN3TCB13runningThreadE
 960      83B70700 
 961 030c 83B70700 		ld	a5,0(a5)
 962              	.LVL38:
 963              	.LBB208:
 964              	.LBB209:
  23:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  24:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ovaj metod vraca vremenski odsecak (kvantum) koji je dodeljen tekucem objektu klase TCB (nit
  25:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // to je broj perioda tajmera - on govori koliko vremena ce se nit izvrsavati
  26:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
  27:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  28:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ovaj metod vraca adresu funkcije koju treba da izvrsava tekuca nit
  29:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     Body getBody() const { return body; }
  30:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  31:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // privatne atribute schedulerPrevThread i schedulerNextThread sam ispravno enkapsulirao jer su
  32:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // i mogu se modifikovati samo kroz setter metode, a mogu da se procitaju samo preko getter met
  33:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     TCB* getPrevThreadScheduler() const { return schedulerPrevThread; }
  34:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setPrevThreadScheduler(TCB* prev) { schedulerPrevThread = prev; }
  35:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     TCB* getNextThreadScheduler() const { return schedulerNextThread; }
  36:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setNextThreadScheduler(TCB* next) { schedulerNextThread = next; }
  37:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  38:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ova metoda sluzi da promeni kontekst, pri cemu tekucu nit suspenduje
  39:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // tako sto je ne vraca u rasporedjivac cak iako ona nije zavrsena
  40:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     static void suspendCurrentThread();
  41:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  42:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ova metoda umece tekucu nit u red uspavanih niti i to sa zadatim brojem perioda tajmera koli
  43:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     static void insertSleepThread(uint64 time);
  44:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ova metoda azurira listu uspavanih niti tako sto dekrementira sleepTime prve niti u listi, i
  45:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // onda se u red spremnih niti vracaju sve niti koje takodje imaju sleepTime nula pocevsi od po
  46:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     static void updateSleepThreadList();
  47:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     TCB* getPrevSleepThread() const { return sleepPrevThread; }
  48:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setPrevSleepThread(TCB* prev) { sleepPrevThread = prev; }
  49:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     TCB* getNextSleepThread() const { return sleepNextThread; }
  50:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setNextSleepThread(TCB* next) { sleepNextThread = next; }
  51:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setSleepTime(uint64 time) { sleepTime = time; }
  52:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     uint64 getSleepTime() const { return sleepTime; }
  53:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  54:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ove metode sluze kao pomoc za ulancavanje niti u listu blokiranih niti na semaforu
  55:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     TCB* getNextSemaphoreThread() const { return semaphoreNextThread; }
GAS LISTING /tmp/ccwpPJqp.s 			page 30


  56:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setNextSemaphoreThread(TCB* next) { semaphoreNextThread = next; }
  57:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // ove metode sluze za postavljanje i dohvatanje flag-a koji nam govori da li je tekuca nit nas
  58:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     // semafor na kojem je ona cekala zatvoren sistemskim pozivom sem_close - u tom slucaju sem_wai
  59:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     void setWaitSemaphoreFailed(bool value) { waitSemaphoreFailed = value; }
  60:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     bool getWaitSemaphoreFailed() const { return waitSemaphoreFailed; }
  61:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
  62:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp ****     int getThreadId() const { return threadId; }
 965              		.loc 3 62 31 is_stmt 1
 966              		.loc 3 62 38 is_stmt 0
 967 0310 83A7C706 		lw	a5,108(a5)
 968              	.LVL39:
 969              	.LBE209:
 970              	.LBE208:
 118:src/Code/InterruptHandling/Riscv.cpp ****             int volatile threadId = TCB::runningThread->getThreadId();
 971              		.loc 1 118 69
 972 0314 2322F4F4 		sw	a5,-188(s0)
 120:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 973              		.loc 1 120 13 is_stmt 1
 120:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch();
 974              		.loc 1 120 26 is_stmt 0
 975 0318 97000000 		call	_ZN3TCB8dispatchEv@plt
 975      E7800000 
 976              	.LVL40:
 123:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[threadId]" : : [threadId] "r"(threadId));
 977              		.loc 1 123 13 is_stmt 1
 123:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[threadId]" : : [threadId] "r"(threadId));
 978              		.loc 1 123 70 is_stmt 0
 979 0320 832744F4 		lw	a5,-188(s0)
 123:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[threadId]" : : [threadId] "r"(threadId));
 980              		.loc 1 123 80
 981              	#APP
 982              	# 123 "src/Code/InterruptHandling/Riscv.cpp" 1
 983              		mv a0,a5
 984              	# 0 "" 2
 985              	#NO_APP
 986              	.LBE207:
 987 0328 6FF01FEE 		j	.L8
 988              	.L45:
 989              	.LBB210:
 990              	.LBB199:
 129:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore** handle; // ovde ce biti smestena adresa na kojoj se nalazi vrednost p
 991              		.loc 1 129 13 is_stmt 1
 130:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 992              		.loc 1 130 13
 130:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 993              		.loc 1 130 76 is_stmt 0
 994              	#APP
 995              	# 130 "src/Code/InterruptHandling/Riscv.cpp" 1
 996              		ld s1,8(sp)
 997              	# 0 "" 2
 998              	.LVL41:
 131:src/Code/InterruptHandling/Riscv.cpp ****             uint16 initialSemaphoreValue; // pocetna vrednost semafora
 999              		.loc 1 131 13 is_stmt 1
 132:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[initialSemaphoreValue],16(sp)" : [initialSemaphoreValue] "=r"(i
 1000              		.loc 1 132 13
 132:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[initialSemaphoreValue],16(sp)" : [initialSemaphoreValue] "=r"(i
 1001              		.loc 1 132 122 is_stmt 0
GAS LISTING /tmp/ccwpPJqp.s 			page 31


 1002              	# 132 "src/Code/InterruptHandling/Riscv.cpp" 1
 1003              		ld a0,16(sp)
 1004              	# 0 "" 2
 1005              	.LVL42:
 135:src/Code/InterruptHandling/Riscv.cpp ****             *handle = KernelSemaphore::createSemaphore(initialSemaphoreValue);
 1006              		.loc 1 135 13 is_stmt 1
 135:src/Code/InterruptHandling/Riscv.cpp ****             *handle = KernelSemaphore::createSemaphore(initialSemaphoreValue);
 1007              		.loc 1 135 55 is_stmt 0
 1008              	#NO_APP
 1009 0334 13150503 		slli	a0,a0,48
 1010              	.LVL43:
 1011 0338 13550503 		srli	a0,a0,48
 1012 033c 97000000 		call	_ZN15KernelSemaphore15createSemaphoreEt@plt
 1012      E7800000 
 1013              	.LVL44:
 135:src/Code/InterruptHandling/Riscv.cpp ****             *handle = KernelSemaphore::createSemaphore(initialSemaphoreValue);
 1014              		.loc 1 135 21
 1015 0344 23B0A400 		sd	a0,0(s1)
 1016              	.LBE199:
 1017 0348 6FF01FEC 		j	.L8
 1018              	.LVL45:
 1019              	.L46:
 1020              	.LBB200:
 1021              	.LBB192:
 140:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* handle; // ovde ce biti smestena adresa semafora kojeg treba oslobodit
 1022              		.loc 1 140 13 is_stmt 1
 141:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 1023              		.loc 1 141 13
 141:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[handle],8(sp)" : [handle] "=r"(handle)); // citanje iz registra
 1024              		.loc 1 141 76 is_stmt 0
 1025              	#APP
 1026              	# 141 "src/Code/InterruptHandling/Riscv.cpp" 1
 1027              		ld a0,8(sp)
 1028              	# 0 "" 2
 1029              	.LVL46:
 144:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = KernelSemaphore::closeSemaphore(handle);
 1030              		.loc 1 144 13 is_stmt 1
 144:src/Code/InterruptHandling/Riscv.cpp ****             int successInfo = KernelSemaphore::closeSemaphore(handle);
 1031              		.loc 1 144 62 is_stmt 0
 1032              	#NO_APP
 1033 0350 97000000 		call	_ZN15KernelSemaphore14closeSemaphoreEPS_@plt
 1033      E7800000 
 1034              	.LVL47:
 146:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
 1035              		.loc 1 146 13 is_stmt 1
 146:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[successInfo]" : : [successInfo] "r"(successInfo));
 1036              		.loc 1 146 89 is_stmt 0
 1037              	#APP
 1038              	# 146 "src/Code/InterruptHandling/Riscv.cpp" 1
 1039              		mv a0,a0
 1040              	# 0 "" 2
 1041              	#NO_APP
 1042              	.LBE192:
 1043 035c 6FF0DFEA 		j	.L8
 1044              	.LVL48:
 1045              	.L47:
 1046              	.LBB193:
GAS LISTING /tmp/ccwpPJqp.s 			page 32


 1047              	.LBB184:
 151:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* semaphoreId; // ovde ce biti smestena adresa semafora za koji treba da
 1048              		.loc 1 151 13 is_stmt 1
 152:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 1049              		.loc 1 152 13
 152:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 1050              		.loc 1 152 91 is_stmt 0
 1051              	#APP
 1052              	# 152 "src/Code/InterruptHandling/Riscv.cpp" 1
 1053              		ld a0,8(sp)
 1054              	# 0 "" 2
 1055              	.LVL49:
 155:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->wait();
 1056              		.loc 1 155 13 is_stmt 1
 155:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->wait();
 1057              		.loc 1 155 30 is_stmt 0
 1058              	#NO_APP
 1059 0364 97000000 		call	_ZN15KernelSemaphore4waitEv@plt
 1059      E7800000 
 1060              	.LVL50:
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 1061              		.loc 1 157 13 is_stmt 1
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 1062              		.loc 1 157 59 is_stmt 0
 1063 036c 97070000 		la	a5,_ZN3TCB13runningThreadE
 1063      83B70700 
 1064 0374 83B70700 		ld	a5,0(a5)
 1065              	.LVL51:
 1066              	.LBB185:
 1067              	.LBB186:
  60:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
 1068              		.loc 3 60 43 is_stmt 1
  60:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
 1069              		.loc 3 60 50 is_stmt 0
 1070 0378 83C78706 		lbu	a5,104(a5)
 1071              	.LVL52:
 1072              	.LBE186:
 1073              	.LBE185:
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 1074              		.loc 1 157 13
 1075 037c 63860700 		beqz	a5,.L19
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 1076              		.loc 1 157 63 is_stmt 1 discriminator 1
 157:src/Code/InterruptHandling/Riscv.cpp ****             if (TCB::runningThread->getWaitSemaphoreFailed()) __asm__ volatile ("li a0,-1"); // slu
 1077              		.loc 1 157 92 is_stmt 0 discriminator 1
 1078              	#APP
 1079              	# 157 "src/Code/InterruptHandling/Riscv.cpp" 1
 1080              		li a0,-1
 1081              	# 0 "" 2
 1082              	#NO_APP
 1083 0384 6FF05FE8 		j	.L8
 1084              	.L19:
 158:src/Code/InterruptHandling/Riscv.cpp ****             else __asm__ volatile ("li a0,1"); // slucaj kada je nit odblokirana normalno pomocu si
 1085              		.loc 1 158 18 is_stmt 1
 158:src/Code/InterruptHandling/Riscv.cpp ****             else __asm__ volatile ("li a0,1"); // slucaj kada je nit odblokirana normalno pomocu si
 1086              		.loc 1 158 46 is_stmt 0
 1087              	#APP
GAS LISTING /tmp/ccwpPJqp.s 			page 33


 1088              	# 158 "src/Code/InterruptHandling/Riscv.cpp" 1
 1089              		li a0,1
 1090              	# 0 "" 2
 1091              	#NO_APP
 1092 038c 6FF0DFE7 		j	.L8
 1093              	.L48:
 1094              	.LBE184:
 1095              	.LBB187:
 1096              	.LBB179:
 163:src/Code/InterruptHandling/Riscv.cpp ****             KernelSemaphore* semaphoreId; // ovde ce biti smestena adresa semafora za koji treba da
 1097              		.loc 1 163 13 is_stmt 1
 164:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 1098              		.loc 1 164 13
 164:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[semaphoreId],8(sp)" : [semaphoreId] "=r"(semaphoreId)); // cita
 1099              		.loc 1 164 91 is_stmt 0
 1100              	#APP
 1101              	# 164 "src/Code/InterruptHandling/Riscv.cpp" 1
 1102              		ld a0,8(sp)
 1103              	# 0 "" 2
 1104              	.LVL53:
 167:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->signal();
 1105              		.loc 1 167 13 is_stmt 1
 167:src/Code/InterruptHandling/Riscv.cpp ****             semaphoreId->signal();
 1106              		.loc 1 167 32 is_stmt 0
 1107              	#NO_APP
 1108 0394 97000000 		call	_ZN15KernelSemaphore6signalEv@plt
 1108      E7800000 
 1109              	.LVL54:
 1110              	.LBE179:
 1111 039c 6FF0DFE6 		j	.L8
 1112              	.L49:
 1113              	.LBB180:
 1114              	.LBB175:
 172:src/Code/InterruptHandling/Riscv.cpp ****             uint64 time; // broj perioda tajmera na koliko treba da se uspava tekuca nit
 1115              		.loc 1 172 13 is_stmt 1
 173:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[time], 8(sp)" : [time] "=r"(time)); // citanje iz registra a1
 1116              		.loc 1 173 13
 173:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[time], 8(sp)" : [time] "=r"(time)); // citanje iz registra a1
 1117              		.loc 1 173 71 is_stmt 0
 1118              	#APP
 1119              	# 173 "src/Code/InterruptHandling/Riscv.cpp" 1
 1120              		ld a0, 8(sp)
 1121              	# 0 "" 2
 1122              	.LVL55:
 176:src/Code/InterruptHandling/Riscv.cpp ****             TCB::insertSleepThread(time);
 1123              		.loc 1 176 13 is_stmt 1
 176:src/Code/InterruptHandling/Riscv.cpp ****             TCB::insertSleepThread(time);
 1124              		.loc 1 176 35 is_stmt 0
 1125              	#NO_APP
 1126 03a4 97000000 		call	_ZN3TCB17insertSleepThreadEm@plt
 1126      E7800000 
 1127              	.LVL56:
 178:src/Code/InterruptHandling/Riscv.cpp ****             TCB::suspendCurrentThread();
 1128              		.loc 1 178 13 is_stmt 1
 178:src/Code/InterruptHandling/Riscv.cpp ****             TCB::suspendCurrentThread();
 1129              		.loc 1 178 38 is_stmt 0
 1130 03ac 97000000 		call	_ZN3TCB20suspendCurrentThreadEv@plt
GAS LISTING /tmp/ccwpPJqp.s 			page 34


 1130      E7800000 
 1131              	.LVL57:
 182:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("li a0,1");
 1132              		.loc 1 182 13 is_stmt 1
 182:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("li a0,1");
 1133              		.loc 1 182 41 is_stmt 0
 1134              	#APP
 1135              	# 182 "src/Code/InterruptHandling/Riscv.cpp" 1
 1136              		li a0,1
 1137              	# 0 "" 2
 1138              	#NO_APP
 1139              	.LBE175:
 1140 03b8 6FF01FE5 		j	.L8
 1141              	.L50:
 1142              	.LBB176:
 1143              	.LBB172:
 187:src/Code/InterruptHandling/Riscv.cpp ****             char inputCharacter = KernelBuffer::getcGetInstance()->removeFromBuffer();
 1144              		.loc 1 187 13 is_stmt 1
 187:src/Code/InterruptHandling/Riscv.cpp ****             char inputCharacter = KernelBuffer::getcGetInstance()->removeFromBuffer();
 1145              		.loc 1 187 84 is_stmt 0
 1146 03bc 97000000 		call	_ZN12KernelBuffer15getcGetInstanceEv@plt
 1146      E7800000 
 1147              	.LVL58:
 1148 03c4 97000000 		call	_ZN12KernelBuffer16removeFromBufferEv@plt
 1148      E7800000 
 1149              	.LVL59:
 189:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[inputCharacter]" : : [inputCharacter] "r"(inputCharacter));
 1150              		.loc 1 189 13 is_stmt 1
 189:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("mv a0,%[inputCharacter]" : : [inputCharacter] "r"(inputCharacter));
 1151              		.loc 1 189 98 is_stmt 0
 1152              	#APP
 1153              	# 189 "src/Code/InterruptHandling/Riscv.cpp" 1
 1154              		mv a0,a0
 1155              	# 0 "" 2
 1156              	#NO_APP
 1157              	.LBE172:
 1158 03d0 6FF09FE3 		j	.L8
 1159              	.LVL60:
 1160              	.L51:
 1161              	.LBB173:
 1162              	.LBB169:
 194:src/Code/InterruptHandling/Riscv.cpp ****             char outputCharacter;
 1163              		.loc 1 194 13 is_stmt 1
 195:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[outputCharacter], 8(sp)" : [outputCharacter] "=r"(outputCharact
 1164              		.loc 1 195 13
 195:src/Code/InterruptHandling/Riscv.cpp ****             __asm__ volatile ("ld %[outputCharacter], 8(sp)" : [outputCharacter] "=r"(outputCharact
 1165              		.loc 1 195 104 is_stmt 0
 1166              	#APP
 1167              	# 195 "src/Code/InterruptHandling/Riscv.cpp" 1
 1168              		ld s1, 8(sp)
 1169              	# 0 "" 2
 1170              	#NO_APP
 1171 03d8 93F4F40F 		andi	s1,s1,0xff
 1172              	.LVL61:
 197:src/Code/InterruptHandling/Riscv.cpp ****             KernelBuffer::putcGetInstance()->insertIntoBuffer(outputCharacter);
 1173              		.loc 1 197 13 is_stmt 1
 197:src/Code/InterruptHandling/Riscv.cpp ****             KernelBuffer::putcGetInstance()->insertIntoBuffer(outputCharacter);
GAS LISTING /tmp/ccwpPJqp.s 			page 35


 1174              		.loc 1 197 62 is_stmt 0
 1175 03dc 97000000 		call	_ZN12KernelBuffer15putcGetInstanceEv@plt
 1175      E7800000 
 1176              	.LVL62:
 1177 03e4 93850400 		mv	a1,s1
 1178 03e8 97000000 		call	_ZN12KernelBuffer16insertIntoBufferEi@plt
 1178      E7800000 
 1179              	.LVL63:
 1180              	.LBE169:
 1181 03f0 6FF09FE1 		j	.L8
 1182              	.LVL64:
 1183              	.L52:
 202:src/Code/InterruptHandling/Riscv.cpp ****             Riscv::maskClearBitsSstatus(Riscv::SSTATUS_SPP);
 1184              		.loc 1 202 13 is_stmt 1
 1185              	.LBB170:
 1186              	.LBB171:
 134:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1187              		.loc 2 134 5
 134:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1188              		.loc 2 134 68 is_stmt 0
 1189 03f4 93070010 		li	a5,256
 1190              	#APP
 1191              	# 134 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 135:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 1192              		csrc sstatus, a5
 1193              	# 0 "" 2
 1194              		.loc 2 135 1
 1195              	#NO_APP
 1196 03fc 6FF0DFE0 		j	.L8
 1197              	.LVL65:
 1198              	.L33:
 1199              	.LBE171:
 1200              	.LBE170:
 1201              	.LBE173:
 1202              	.LBE176:
 1203              	.LBE180:
 1204              	.LBE187:
 1205              	.LBE193:
 1206              	.LBE200:
 1207              	.LBE210:
 1208              	.LBE219:
 1209              	.LBE229:
 1210              	.LBE239:
 1211              	.LBE252:
 1212              	.LBE265:
 1213              	.LBE279:
 1214              	.LBE294:
 1215              	.LBE313:
 1216              	.LBE328:
 1217              	.LBB329:
 227:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1218              		.loc 1 227 9 is_stmt 1
 227:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1219              		.loc 1 227 26 is_stmt 0
 1220 0400 033584FD 		ld	a0,-40(s0)
 1221              	.LBB138:
 1222              	.LBB139:
GAS LISTING /tmp/ccwpPJqp.s 			page 36


 197:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 198:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 199:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeScause(uint64 scause) {
 200:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 201:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 202:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 203:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readStvec() {
 204:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile stvec;
 205:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 206:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return stvec;
 207:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 208:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 209:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline void Riscv::writeStvec(uint64 stvec) {
 210:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 211:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 212:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 213:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** inline uint64 Riscv::readStval() {
 214:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     uint64 volatile stval;
 1223              		.loc 2 214 5 is_stmt 1
 215:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 1224              		.loc 2 215 5
 1225              		.loc 2 215 68 is_stmt 0
 1226              	#APP
 1227              	# 215 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 216              	    return stval;
 1228              		csrr a5, stval
 1229              	# 0 "" 2
 1230              	#NO_APP
 1231 0408 2330F4FA 		sd	a5,-96(s0)
 1232              		.loc 2 216 5 is_stmt 1
 1233              		.loc 2 216 12 is_stmt 0
 1234 040c 833504FA 		ld	a1,-96(s0)
 1235              	.LBE139:
 1236              	.LBE138:
 1237              	.LBB140:
 1238              	.LBB141:
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1239              		.loc 2 184 5 is_stmt 1
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1240              		.loc 2 185 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1241              		.loc 2 185 64 is_stmt 0
 1242              	#APP
 1243              	# 185 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1244              		csrr a5, sepc
 1245              	# 0 "" 2
 1246              	#NO_APP
 1247 0414 233CF4F8 		sd	a5,-104(s0)
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1248              		.loc 2 186 5 is_stmt 1
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1249              		.loc 2 186 12 is_stmt 0
 1250 0418 033684F9 		ld	a2,-104(s0)
 1251              	.LBE141:
 1252              	.LBE140:
 227:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1253              		.loc 1 227 26
GAS LISTING /tmp/ccwpPJqp.s 			page 37


 1254 041c 97000000 		call	_Z17printErrorMessagemmm@plt
 1254      E7800000 
 1255              	.LVL66:
 1256 0424 6FF01FE1 		j	.L25
 1257              	.L34:
 1258              	.LBB142:
 231:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1259              		.loc 1 231 9 is_stmt 1
 231:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1260              		.loc 1 231 26 is_stmt 0
 1261 0428 033584FD 		ld	a0,-40(s0)
 1262              	.LBB130:
 1263              	.LBB131:
 214:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 1264              		.loc 2 214 5 is_stmt 1
 215:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return stval;
 1265              		.loc 2 215 5
 215:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return stval;
 1266              		.loc 2 215 68 is_stmt 0
 1267              	#APP
 1268              	# 215 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1269              		csrr a5, stval
 1270              	# 0 "" 2
 1271              	#NO_APP
 1272 0430 2338F4FA 		sd	a5,-80(s0)
 1273              		.loc 2 216 5 is_stmt 1
 1274              		.loc 2 216 12 is_stmt 0
 1275 0434 833504FB 		ld	a1,-80(s0)
 1276              	.LBE131:
 1277              	.LBE130:
 1278              	.LBB132:
 1279              	.LBB133:
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1280              		.loc 2 184 5 is_stmt 1
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1281              		.loc 2 185 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1282              		.loc 2 185 64 is_stmt 0
 1283              	#APP
 1284              	# 185 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1285              		csrr a5, sepc
 1286              	# 0 "" 2
 1287              	#NO_APP
 1288 043c 2334F4FA 		sd	a5,-88(s0)
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1289              		.loc 2 186 5 is_stmt 1
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1290              		.loc 2 186 12 is_stmt 0
 1291 0440 033684FA 		ld	a2,-88(s0)
 1292              	.LBE133:
 1293              	.LBE132:
 231:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1294              		.loc 1 231 26
 1295 0444 97000000 		call	_Z17printErrorMessagemmm@plt
 1295      E7800000 
 1296              	.LVL67:
 1297 044c 6FF09FDE 		j	.L25
GAS LISTING /tmp/ccwpPJqp.s 			page 38


 1298              	.L35:
 1299              	.LBB134:
 235:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1300              		.loc 1 235 9 is_stmt 1
 235:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1301              		.loc 1 235 26 is_stmt 0
 1302 0450 033584FD 		ld	a0,-40(s0)
 1303              	.LBB123:
 1304              	.LBB124:
 214:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 1305              		.loc 2 214 5 is_stmt 1
 215:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return stval;
 1306              		.loc 2 215 5
 215:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return stval;
 1307              		.loc 2 215 68 is_stmt 0
 1308              	#APP
 1309              	# 215 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1310              		csrr a5, stval
 1311              	# 0 "" 2
 1312              	#NO_APP
 1313 0458 2330F4FC 		sd	a5,-64(s0)
 1314              		.loc 2 216 5 is_stmt 1
 1315              		.loc 2 216 12 is_stmt 0
 1316 045c 833504FC 		ld	a1,-64(s0)
 1317              	.LBE124:
 1318              	.LBE123:
 1319              	.LBB125:
 1320              	.LBB126:
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1321              		.loc 2 184 5 is_stmt 1
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1322              		.loc 2 185 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1323              		.loc 2 185 64 is_stmt 0
 1324              	#APP
 1325              	# 185 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1326              		csrr a5, sepc
 1327              	# 0 "" 2
 1328              	#NO_APP
 1329 0464 233CF4FA 		sd	a5,-72(s0)
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1330              		.loc 2 186 5 is_stmt 1
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1331              		.loc 2 186 12 is_stmt 0
 1332 0468 033684FB 		ld	a2,-72(s0)
 1333              	.LBE126:
 1334              	.LBE125:
 235:src/Code/InterruptHandling/Riscv.cpp ****         printErrorMessage(scause, readStval(), readSepc());
 1335              		.loc 1 235 26
 1336 046c 97000000 		call	_Z17printErrorMessagemmm@plt
 1336      E7800000 
 1337              	.LVL68:
 1338 0474 6FF01FDC 		j	.L25
 1339              	.L36:
 1340              	.LBB127:
 1341              	.LBB106:
 239:src/Code/InterruptHandling/Riscv.cpp ****         maskClearBitsSip(SIP_SSIP); // brise se zahtev za prekidom od tajmera
GAS LISTING /tmp/ccwpPJqp.s 			page 39


 1342              		.loc 1 239 9 is_stmt 1
 1343              	.LVL69:
 1344              	.LBB107:
 1345              	.LBB108:
 152:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1346              		.loc 2 152 5
 152:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1347              		.loc 2 152 64 is_stmt 0
 1348 0478 93072000 		li	a5,2
 1349              	#APP
 1350              	# 152 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1351              		csrc sip, a5
 1352              	# 0 "" 2
 1353              	.LVL70:
 1354              	#NO_APP
 1355              	.LBE108:
 1356              	.LBE107:
 240:src/Code/InterruptHandling/Riscv.cpp ****         TCB::updateSleepThreadList(); // azuriranje liste uspavanih niti
 1357              		.loc 1 240 9 is_stmt 1
 240:src/Code/InterruptHandling/Riscv.cpp ****         TCB::updateSleepThreadList(); // azuriranje liste uspavanih niti
 1358              		.loc 1 240 35 is_stmt 0
 1359 0480 97000000 		call	_ZN3TCB21updateSleepThreadListEv@plt
 1359      E7800000 
 1360              	.LVL71:
 241:src/Code/InterruptHandling/Riscv.cpp ****         TCB::timeSliceCounter++; // povecava se brojac perioda tajmera za tekucu nit (runningThread
 1361              		.loc 1 241 9 is_stmt 1
 241:src/Code/InterruptHandling/Riscv.cpp ****         TCB::timeSliceCounter++; // povecava se brojac perioda tajmera za tekucu nit (runningThread
 1362              		.loc 1 241 30 is_stmt 0
 1363 0488 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 1363      03370700 
 1364 0490 83370700 		ld	a5,0(a4)
 1365 0494 93871700 		addi	a5,a5,1
 1366 0498 2330F700 		sd	a5,0(a4)
 243:src/Code/InterruptHandling/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::runningThread->getTimeSlice()) {
 1367              		.loc 1 243 9 is_stmt 1
 1368              	.LBB109:
 243:src/Code/InterruptHandling/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::runningThread->getTimeSlice()) {
 1369              		.loc 1 243 70 is_stmt 0
 1370 049c 17070000 		la	a4,_ZN3TCB13runningThreadE
 1370      03370700 
 1371 04a4 03370700 		ld	a4,0(a4)
 1372              	.LVL72:
 1373              	.LBB110:
 1374              	.LBB111:
  26:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
 1375              		.loc 3 26 35 is_stmt 1
  26:src/Code/InterruptHandling/../../../h/Code/Thread/TCB.hpp **** 
 1376              		.loc 3 26 42 is_stmt 0
 1377 04a8 03370701 		ld	a4,16(a4)
 1378              	.LVL73:
 1379              	.LBE111:
 1380              	.LBE110:
 243:src/Code/InterruptHandling/Riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::runningThread->getTimeSlice()) {
 1381              		.loc 1 243 9
 1382 04ac E3E4E7D8 		bltu	a5,a4,.L25
 1383              	.LBB112:
 244:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sepc = readSepc();
GAS LISTING /tmp/ccwpPJqp.s 			page 40


 1384              		.loc 1 244 13 is_stmt 1
 1385              	.LBB113:
 1386              	.LBB114:
 184:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 1387              		.loc 2 184 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1388              		.loc 2 185 5
 185:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sepc;
 1389              		.loc 2 185 64 is_stmt 0
 1390              	#APP
 1391              	# 185 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1392              		csrr a5, sepc
 1393              	# 0 "" 2
 1394              	#NO_APP
 1395 04b4 2338F4FC 		sd	a5,-48(s0)
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1396              		.loc 2 186 5 is_stmt 1
 186:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1397              		.loc 2 186 12 is_stmt 0
 1398 04b8 833704FD 		ld	a5,-48(s0)
 1399              	.LBE114:
 1400              	.LBE113:
 244:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sepc = readSepc();
 1401              		.loc 1 244 45
 1402 04bc 2338F4F6 		sd	a5,-144(s0)
 245:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sstatus = readSstatus();
 1403              		.loc 1 245 13 is_stmt 1
 1404              	.LBB115:
 1405              	.LBB116:
 120:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 1406              		.loc 2 120 5
 121:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sstatus;
 1407              		.loc 2 121 5
 121:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp ****     return sstatus;
 1408              		.loc 2 121 76 is_stmt 0
 1409              	#APP
 1410              	# 121 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1411              		csrr a5, sstatus
 1412              	# 0 "" 2
 1413              	#NO_APP
 1414 04c4 2334F4FC 		sd	a5,-56(s0)
 122:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1415              		.loc 2 122 5 is_stmt 1
 122:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1416              		.loc 2 122 12 is_stmt 0
 1417 04c8 833784FC 		ld	a5,-56(s0)
 1418              	.LBE116:
 1419              	.LBE115:
 245:src/Code/InterruptHandling/Riscv.cpp ****             uint64 volatile sstatus = readSstatus();
 1420              		.loc 1 245 51
 1421 04cc 233CF4F6 		sd	a5,-136(s0)
 246:src/Code/InterruptHandling/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1422              		.loc 1 246 13 is_stmt 1
 246:src/Code/InterruptHandling/Riscv.cpp ****             TCB::timeSliceCounter = 0;
 1423              		.loc 1 246 35 is_stmt 0
 1424 04d0 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 1424      83B70700 
GAS LISTING /tmp/ccwpPJqp.s 			page 41


 1425 04d8 23B00700 		sd	zero,0(a5)
 247:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch(); // promena konteksta
 1426              		.loc 1 247 13 is_stmt 1
 247:src/Code/InterruptHandling/Riscv.cpp ****             TCB::dispatch(); // promena konteksta
 1427              		.loc 1 247 26 is_stmt 0
 1428 04dc 97000000 		call	_ZN3TCB8dispatchEv@plt
 1428      E7800000 
 1429              	.LVL74:
 248:src/Code/InterruptHandling/Riscv.cpp ****             writeSepc(sepc);
 1430              		.loc 1 248 13 is_stmt 1
 248:src/Code/InterruptHandling/Riscv.cpp ****             writeSepc(sepc);
 1431              		.loc 1 248 22 is_stmt 0
 1432 04e4 833704F7 		ld	a5,-144(s0)
 1433              	.LVL75:
 1434              	.LBB117:
 1435              	.LBB118:
 190:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1436              		.loc 2 190 5 is_stmt 1
 190:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1437              		.loc 2 190 65 is_stmt 0
 1438              	#APP
 1439              	# 190 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 1440              		csrw sepc, a5
 1441              	# 0 "" 2
 1442              	.LVL76:
 1443              	#NO_APP
 1444              	.LBE118:
 1445              	.LBE117:
 249:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 1446              		.loc 1 249 13 is_stmt 1
 249:src/Code/InterruptHandling/Riscv.cpp ****             writeSstatus(sstatus);
 1447              		.loc 1 249 25 is_stmt 0
 1448 04ec 833784F7 		ld	a5,-136(s0)
 1449              	.LVL77:
 1450              	.LBB119:
 1451              	.LBB120:
 126:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1452              		.loc 2 126 5 is_stmt 1
 126:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** }
 1453              		.loc 2 126 77 is_stmt 0
 1454              	#APP
 1455              	# 126 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp" 1
 127:src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp **** 
 1456              		csrw sstatus, a5
 1457              	# 0 "" 2
 1458              		.loc 2 127 1
 1459              	#NO_APP
 1460 04f4 6FF01FD4 		j	.L25
 1461              	.LVL78:
 1462              	.L30:
 1463              	.LBE120:
 1464              	.LBE119:
 1465              	.LBE112:
 1466              	.LBE109:
 1467              	.LBE106:
 1468              	.LBB121:
 1469              	.LBB105:
GAS LISTING /tmp/ccwpPJqp.s 			page 42


 1470              	.LBB104:
 1471              	.LBB100:
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 1472              		.loc 1 260 13 is_stmt 1
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 1473              		.loc 1 260 63
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 1474              		.loc 1 260 20 is_stmt 0
 1475 04f8 97070000 		la	a5,CONSOLE_STATUS
 1475      83B70700 
 1476 0500 83B70700 		ld	a5,0(a5)
 1477 0504 83C70700 		lbu	a5,0(a5)
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 1478              		.loc 1 260 63
 1479 0508 93F71700 		andi	a5,a5,1
 1480 050c E38007BC 		beqz	a5,.L29
 1481              	.LBB101:
 261:src/Code/InterruptHandling/Riscv.cpp ****                 int consoleInput = *reinterpret_cast<char*>(CONSOLE_RX_DATA);
 1482              		.loc 1 261 17 is_stmt 1
 261:src/Code/InterruptHandling/Riscv.cpp ****                 int consoleInput = *reinterpret_cast<char*>(CONSOLE_RX_DATA);
 1483              		.loc 1 261 36 is_stmt 0
 1484 0510 97070000 		la	a5,CONSOLE_RX_DATA
 1484      83B70700 
 1485 0518 83B70700 		ld	a5,0(a5)
 261:src/Code/InterruptHandling/Riscv.cpp ****                 int consoleInput = *reinterpret_cast<char*>(CONSOLE_RX_DATA);
 1486              		.loc 1 261 21
 1487 051c 83C40700 		lbu	s1,0(a5)
 1488              	.LVL79:
 262:src/Code/InterruptHandling/Riscv.cpp ****                 KernelBuffer::getcGetInstance()->insertIntoBuffer(consoleInput);
 1489              		.loc 1 262 17 is_stmt 1
 262:src/Code/InterruptHandling/Riscv.cpp ****                 KernelBuffer::getcGetInstance()->insertIntoBuffer(consoleInput);
 1490              		.loc 1 262 66 is_stmt 0
 1491 0520 97000000 		call	_ZN12KernelBuffer15getcGetInstanceEv@plt
 1491      E7800000 
 1492              	.LVL80:
 1493 0528 93850400 		mv	a1,s1
 1494 052c 97000000 		call	_ZN12KernelBuffer16insertIntoBufferEi@plt
 1494      E7800000 
 1495              	.LVL81:
 1496              	.LBE101:
 260:src/Code/InterruptHandling/Riscv.cpp ****             while (*reinterpret_cast<char*>(CONSOLE_STATUS) & CONSOLE_RX_STATUS_BIT) {
 1497              		.loc 1 260 13
 1498 0534 6FF05FFC 		j	.L30
 1499              	.LBE100:
 1500              	.LBE104:
 1501              	.LBE105:
 1502              	.LBE121:
 1503              	.LBE127:
 1504              	.LBE134:
 1505              	.LBE142:
 1506              	.LBE329:
 1507              	.LBE349:
 1508              		.cfi_endproc
 1509              	.LFE51:
 1511              	.Letext0:
 1512              		.file 4 "src/Code/InterruptHandling/../../../h/Code/InterruptHandling/../../../lib/hw.h"
 1513              		.file 5 "src/Code/InterruptHandling/../../../h/Code/MemoryAllocator/MemoryAllocator.hpp"
GAS LISTING /tmp/ccwpPJqp.s 			page 43


 1514              		.file 6 "src/Code/InterruptHandling/../../../h/Code/Thread/../Scheduler/Scheduler.hpp"
 1515              		.file 7 "src/Code/InterruptHandling/../../../h/Code/Semaphore/KernelSemaphore.hpp"
 1516              		.file 8 "src/Code/InterruptHandling/../../../h/Code/Console/KernelBuffer.hpp"
 1517              		.file 9 "src/Code/InterruptHandling/../../../h/Code/Console/../SystemCalls/syscall_c.h"
 1518              		.file 10 "src/Code/InterruptHandling/../../../h/Code/Printing/print.hpp"
GAS LISTING /tmp/ccwpPJqp.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 Riscv.cpp
     /tmp/ccwpPJqp.s:9      .text:0000000000000000 _ZN5Riscv18exitSupervisorTrapEv
     /tmp/ccwpPJqp.s:13     .text:0000000000000000 .L0 
     /tmp/ccwpPJqp.s:14     .text:0000000000000000 .L0 
     /tmp/ccwpPJqp.s:15     .text:0000000000000004 .L0 
     /tmp/ccwpPJqp.s:17     .text:0000000000000008 .L0 
     /tmp/ccwpPJqp.s:19     .text:000000000000000c .L0 
     /tmp/ccwpPJqp.s:21     .text:000000000000000c .L0 
src/Code/InterruptHandling/Riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccwpPJqp.s:27     .text:0000000000000010 .L0 
src/Code/InterruptHandling/Riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccwpPJqp.s:33     .text:0000000000000014 .L0 
     /tmp/ccwpPJqp.s:34     .text:0000000000000018 .L0 
     /tmp/ccwpPJqp.s:35     .text:0000000000000018 .L0 
     /tmp/ccwpPJqp.s:37     .text:000000000000001c .L0 
     /tmp/ccwpPJqp.s:39     .text:0000000000000020 .L0 
     /tmp/ccwpPJqp.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccwpPJqp.s:48     .text:0000000000000020 .L0 
     /tmp/ccwpPJqp.s:49     .text:0000000000000020 .L0 
     /tmp/ccwpPJqp.s:50     .text:0000000000000024 .L0 
     /tmp/ccwpPJqp.s:55     .text:0000000000000034 .L0 
     /tmp/ccwpPJqp.s:56     .text:0000000000000034 .L0 
     /tmp/ccwpPJqp.s:57     .text:0000000000000034 .L0 
     /tmp/ccwpPJqp.s:58     .text:0000000000000034 .L0 
     /tmp/ccwpPJqp.s:60     .text:0000000000000038 .L0 
     /tmp/ccwpPJqp.s:62     .text:0000000000000038 .L0 
src/Code/InterruptHandling/Riscv.cpp:18     .text:0000000000000038 .L0 
     /tmp/ccwpPJqp.s:68     .text:000000000000003c .L0 
     /tmp/ccwpPJqp.s:70     .text:000000000000003c .L0 
     /tmp/ccwpPJqp.s:76     .text:0000000000000044 .L0 
     /tmp/ccwpPJqp.s:77     .text:0000000000000044 .L0 
     /tmp/ccwpPJqp.s:78     .text:0000000000000044 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:195    .text:0000000000000044 .L0 
     /tmp/ccwpPJqp.s:86     .text:000000000000004c .L0 
     /tmp/ccwpPJqp.s:87     .text:000000000000004c .L0 
     /tmp/ccwpPJqp.s:91     .text:0000000000000050 .L0 
     /tmp/ccwpPJqp.s:94     .text:0000000000000054 .L0 
     /tmp/ccwpPJqp.s:95     .text:0000000000000054 .L0 
     /tmp/ccwpPJqp.s:97     .text:0000000000000058 .L0 
     /tmp/ccwpPJqp.s:100    .text:0000000000000060 .L0 
     /tmp/ccwpPJqp.s:102    .text:0000000000000064 .L0 
     /tmp/ccwpPJqp.s:108    .text:000000000000006c .L0 
     /tmp/ccwpPJqp.s:109    .text:000000000000006c .L0 
     /tmp/ccwpPJqp.s:111    .text:0000000000000070 .L0 
     /tmp/ccwpPJqp.s:119    .text:0000000000000078 .L0 
     /tmp/ccwpPJqp.s:120    .text:0000000000000078 .L0 
     /tmp/ccwpPJqp.s:122    .text:000000000000007c .L0 
     /tmp/ccwpPJqp.s:132    .text:0000000000000084 .L0 
     /tmp/ccwpPJqp.s:133    .text:0000000000000084 .L0 
     /tmp/ccwpPJqp.s:135    .text:0000000000000088 .L0 
     /tmp/ccwpPJqp.s:147    .text:0000000000000090 .L0 
     /tmp/ccwpPJqp.s:148    .text:0000000000000090 .L0 
     /tmp/ccwpPJqp.s:150    .text:0000000000000094 .L0 
     /tmp/ccwpPJqp.s:166    .text:00000000000000a4 .L0 
     /tmp/ccwpPJqp.s:167    .text:00000000000000a4 .L0 
     /tmp/ccwpPJqp.s:169    .text:00000000000000a8 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 45


     /tmp/ccwpPJqp.s:175    .text:00000000000000b8 .L0 
     /tmp/ccwpPJqp.s:176    .text:00000000000000b8 .L0 
     /tmp/ccwpPJqp.s:182    .text:00000000000000c4 .L0 
     /tmp/ccwpPJqp.s:188    .text:00000000000000cc .L0 
     /tmp/ccwpPJqp.s:189    .text:00000000000000cc .L0 
     /tmp/ccwpPJqp.s:195    .text:00000000000000d8 .L0 
     /tmp/ccwpPJqp.s:196    .text:00000000000000d8 .L0 
     /tmp/ccwpPJqp.s:197    .text:00000000000000d8 .L0 
     /tmp/ccwpPJqp.s:204    .text:00000000000000e0 .L0 
     /tmp/ccwpPJqp.s:219    .text:00000000000000e4 .L0 
     /tmp/ccwpPJqp.s:220    .text:00000000000000e4 .L0 
     /tmp/ccwpPJqp.s:221    .text:00000000000000e4 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:185    .text:00000000000000e4 .L0 
     /tmp/ccwpPJqp.s:229    .text:00000000000000ec .L0 
     /tmp/ccwpPJqp.s:230    .text:00000000000000ec .L0 
     /tmp/ccwpPJqp.s:234    .text:00000000000000f0 .L0 
     /tmp/ccwpPJqp.s:236    .text:00000000000000f4 .L0 
     /tmp/ccwpPJqp.s:240    .text:00000000000000f8 .L0 
     /tmp/ccwpPJqp.s:241    .text:00000000000000f8 .L0 
     /tmp/ccwpPJqp.s:242    .text:00000000000000f8 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:121    .text:00000000000000f8 .L0 
     /tmp/ccwpPJqp.s:250    .text:0000000000000100 .L0 
     /tmp/ccwpPJqp.s:251    .text:0000000000000100 .L0 
     /tmp/ccwpPJqp.s:255    .text:0000000000000104 .L0 
     /tmp/ccwpPJqp.s:257    .text:0000000000000108 .L0 
     /tmp/ccwpPJqp.s:258    .text:0000000000000108 .L0 
src/Code/InterruptHandling/Riscv.cpp:35     .text:0000000000000108 .L0 
     /tmp/ccwpPJqp.s:267    .text:0000000000000110 .L0 
     /tmp/ccwpPJqp.s:268    .text:0000000000000110 .L0 
     /tmp/ccwpPJqp.s:270    .text:0000000000000114 .L0 
     /tmp/ccwpPJqp.s:280    .text:000000000000011c .L0 
     /tmp/ccwpPJqp.s:281    .text:000000000000011c .L0 
     /tmp/ccwpPJqp.s:283    .text:0000000000000120 .L0 
     /tmp/ccwpPJqp.s:295    .text:0000000000000128 .L0 
     /tmp/ccwpPJqp.s:296    .text:0000000000000128 .L0 
     /tmp/ccwpPJqp.s:298    .text:000000000000012c .L0 
     /tmp/ccwpPJqp.s:312    .text:0000000000000134 .L0 
     /tmp/ccwpPJqp.s:313    .text:0000000000000134 .L0 
     /tmp/ccwpPJqp.s:315    .text:0000000000000138 .L0 
     /tmp/ccwpPJqp.s:331    .text:0000000000000140 .L0 
     /tmp/ccwpPJqp.s:332    .text:0000000000000140 .L0 
     /tmp/ccwpPJqp.s:334    .text:0000000000000144 .L0 
     /tmp/ccwpPJqp.s:352    .text:000000000000014c .L0 
     /tmp/ccwpPJqp.s:353    .text:000000000000014c .L0 
     /tmp/ccwpPJqp.s:355    .text:0000000000000150 .L0 
     /tmp/ccwpPJqp.s:375    .text:0000000000000158 .L0 
     /tmp/ccwpPJqp.s:376    .text:0000000000000158 .L0 
     /tmp/ccwpPJqp.s:378    .text:000000000000015c .L0 
     /tmp/ccwpPJqp.s:400    .text:0000000000000164 .L0 
     /tmp/ccwpPJqp.s:401    .text:0000000000000164 .L0 
     /tmp/ccwpPJqp.s:403    .text:0000000000000168 .L0 
     /tmp/ccwpPJqp.s:427    .text:0000000000000170 .L0 
     /tmp/ccwpPJqp.s:428    .text:0000000000000170 .L0 
     /tmp/ccwpPJqp.s:430    .text:0000000000000174 .L0 
     /tmp/ccwpPJqp.s:456    .text:000000000000017c .L0 
     /tmp/ccwpPJqp.s:457    .text:000000000000017c .L0 
     /tmp/ccwpPJqp.s:459    .text:0000000000000180 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 46


     /tmp/ccwpPJqp.s:487    .text:0000000000000188 .L0 
     /tmp/ccwpPJqp.s:488    .text:0000000000000188 .L0 
     /tmp/ccwpPJqp.s:490    .text:000000000000018c .L0 
     /tmp/ccwpPJqp.s:520    .text:0000000000000194 .L0 
     /tmp/ccwpPJqp.s:521    .text:0000000000000194 .L0 
     /tmp/ccwpPJqp.s:523    .text:0000000000000198 .L0 
     /tmp/ccwpPJqp.s:555    .text:00000000000001a0 .L0 
     /tmp/ccwpPJqp.s:556    .text:00000000000001a0 .L0 
     /tmp/ccwpPJqp.s:558    .text:00000000000001a4 .L0 
     /tmp/ccwpPJqp.s:592    .text:00000000000001ac .L0 
     /tmp/ccwpPJqp.s:593    .text:00000000000001ac .L0 
     /tmp/ccwpPJqp.s:595    .text:00000000000001b0 .L0 
     /tmp/ccwpPJqp.s:631    .text:00000000000001b8 .L0 
     /tmp/ccwpPJqp.s:632    .text:00000000000001b8 .L0 
     /tmp/ccwpPJqp.s:634    .text:00000000000001bc .L0 
     /tmp/ccwpPJqp.s:637    .text:00000000000001c4 .L0 
     /tmp/ccwpPJqp.s:638    .text:00000000000001c4 .L0 
     /tmp/ccwpPJqp.s:640    .text:00000000000001c8 .L0 
     /tmp/ccwpPJqp.s:643    .text:00000000000001d0 .L0 
     /tmp/ccwpPJqp.s:644    .text:00000000000001d0 .L0 
     /tmp/ccwpPJqp.s:646    .text:00000000000001d4 .L0 
     /tmp/ccwpPJqp.s:652    .text:00000000000001dc .L0 
     /tmp/ccwpPJqp.s:653    .text:00000000000001dc .L0 
     /tmp/ccwpPJqp.s:654    .text:00000000000001dc .L0 
     /tmp/ccwpPJqp.s:661    .text:00000000000001e4 .L0 
     /tmp/ccwpPJqp.s:682    .text:00000000000001e8 .L0 
     /tmp/ccwpPJqp.s:683    .text:00000000000001e8 .L0 
src/Code/InterruptHandling/Riscv.cpp:41     .text:00000000000001e8 .L0 
     /tmp/ccwpPJqp.s:691    .text:00000000000001f0 .L0 
     /tmp/ccwpPJqp.s:692    .text:00000000000001f0 .L0 
     /tmp/ccwpPJqp.s:695    .text:00000000000001f8 .L0 
     /tmp/ccwpPJqp.s:699    .text:0000000000000204 .L0 
src/Code/InterruptHandling/Riscv.cpp:47     .text:0000000000000204 .L0 
     /tmp/ccwpPJqp.s:710    .text:0000000000000208 .L0 
src/Code/InterruptHandling/Riscv.cpp:216    .text:0000000000000208 .L0 
     /tmp/ccwpPJqp.s:716    .text:000000000000020c .L0 
     /tmp/ccwpPJqp.s:718    .text:000000000000020c .L0 
     /tmp/ccwpPJqp.s:723    .text:0000000000000210 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:190    .text:0000000000000210 .L0 
     /tmp/ccwpPJqp.s:733    .text:0000000000000214 .L0 
     /tmp/ccwpPJqp.s:734    .text:0000000000000214 .L0 
     /tmp/ccwpPJqp.s:736    .text:0000000000000218 .L0 
     /tmp/ccwpPJqp.s:739    .text:0000000000000220 .L0 
     /tmp/ccwpPJqp.s:741    .text:0000000000000224 .L0 
     /tmp/ccwpPJqp.s:744    .text:000000000000022c .L0 
     /tmp/ccwpPJqp.s:745    .text:000000000000022c .L0 
     /tmp/ccwpPJqp.s:750    .text:0000000000000230 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:126    .text:0000000000000230 .L0 
     /tmp/ccwpPJqp.s:763    .text:0000000000000234 .L0 
src/Code/InterruptHandling/Riscv.cpp:273    .text:0000000000000234 .L0 
     /tmp/ccwpPJqp.s:770    .text:0000000000000238 .L0 
     /tmp/ccwpPJqp.s:771    .text:000000000000023c .L0 
     /tmp/ccwpPJqp.s:772    .text:000000000000023c .L0 
     /tmp/ccwpPJqp.s:774    .text:0000000000000240 .L0 
     /tmp/ccwpPJqp.s:775    .text:0000000000000240 .L0 
     /tmp/ccwpPJqp.s:777    .text:0000000000000244 .L0 
     /tmp/ccwpPJqp.s:779    .text:0000000000000248 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 47


     /tmp/ccwpPJqp.s:781    .text:000000000000024c .L0 
     /tmp/ccwpPJqp.s:784    .text:0000000000000250 .L0 
     /tmp/ccwpPJqp.s:791    .text:0000000000000250 .L0 
     /tmp/ccwpPJqp.s:792    .text:0000000000000250 .L0 
src/Code/InterruptHandling/Riscv.cpp:53     .text:0000000000000250 .L0 
     /tmp/ccwpPJqp.s:800    .text:0000000000000258 .L0 
     /tmp/ccwpPJqp.s:801    .text:0000000000000258 .L0 
     /tmp/ccwpPJqp.s:804    .text:0000000000000260 .L0 
     /tmp/ccwpPJqp.s:808    .text:000000000000026c .L0 
src/Code/InterruptHandling/Riscv.cpp:59     .text:000000000000026c .L0 
     /tmp/ccwpPJqp.s:821    .text:0000000000000274 .L0 
     /tmp/ccwpPJqp.s:822    .text:0000000000000274 .L0 
src/Code/InterruptHandling/Riscv.cpp:65     .text:0000000000000274 .L0 
     /tmp/ccwpPJqp.s:829    .text:0000000000000278 .L0 
     /tmp/ccwpPJqp.s:830    .text:0000000000000278 .L0 
src/Code/InterruptHandling/Riscv.cpp:67     .text:0000000000000278 .L0 
     /tmp/ccwpPJqp.s:836    .text:000000000000027c .L0 
     /tmp/ccwpPJqp.s:837    .text:000000000000027c .L0 
src/Code/InterruptHandling/Riscv.cpp:69     .text:000000000000027c .L0 
     /tmp/ccwpPJqp.s:843    .text:0000000000000280 .L0 
     /tmp/ccwpPJqp.s:844    .text:0000000000000280 .L0 
src/Code/InterruptHandling/Riscv.cpp:71     .text:0000000000000280 .L0 
     /tmp/ccwpPJqp.s:850    .text:0000000000000284 .L0 
     /tmp/ccwpPJqp.s:852    .text:0000000000000284 .L0 
     /tmp/ccwpPJqp.s:856    .text:0000000000000290 .L0 
     /tmp/ccwpPJqp.s:863    .text:0000000000000298 .L0 
     /tmp/ccwpPJqp.s:864    .text:0000000000000298 .L0 
     /tmp/ccwpPJqp.s:871    .text:00000000000002a4 .L0 
     /tmp/ccwpPJqp.s:872    .text:00000000000002a4 .L0 
     /tmp/ccwpPJqp.s:878    .text:00000000000002ac .L0 
     /tmp/ccwpPJqp.s:879    .text:00000000000002ac .L0 
     /tmp/ccwpPJqp.s:885    .text:00000000000002b8 .L0 
     /tmp/ccwpPJqp.s:886    .text:00000000000002b8 .L0 
     /tmp/ccwpPJqp.s:893    .text:00000000000002c4 .L0 
     /tmp/ccwpPJqp.s:894    .text:00000000000002c4 .L0 
src/Code/InterruptHandling/Riscv.cpp:95     .text:00000000000002c4 .L0 
     /tmp/ccwpPJqp.s:901    .text:00000000000002c8 .L0 
     /tmp/ccwpPJqp.s:902    .text:00000000000002c8 .L0 
src/Code/InterruptHandling/Riscv.cpp:97     .text:00000000000002c8 .L0 
     /tmp/ccwpPJqp.s:908    .text:00000000000002cc .L0 
     /tmp/ccwpPJqp.s:909    .text:00000000000002cc .L0 
src/Code/InterruptHandling/Riscv.cpp:99     .text:00000000000002cc .L0 
     /tmp/ccwpPJqp.s:915    .text:00000000000002d0 .L0 
     /tmp/ccwpPJqp.s:916    .text:00000000000002d0 .L0 
src/Code/InterruptHandling/Riscv.cpp:101    .text:00000000000002d0 .L0 
     /tmp/ccwpPJqp.s:922    .text:00000000000002d4 .L0 
     /tmp/ccwpPJqp.s:924    .text:00000000000002d4 .L0 
     /tmp/ccwpPJqp.s:928    .text:00000000000002e0 .L0 
     /tmp/ccwpPJqp.s:936    .text:00000000000002e8 .L0 
     /tmp/ccwpPJqp.s:937    .text:00000000000002e8 .L0 
src/Code/InterruptHandling/Riscv.cpp:110    .text:00000000000002e8 .L0 
     /tmp/ccwpPJqp.s:944    .text:00000000000002ec .L0 
     /tmp/ccwpPJqp.s:946    .text:00000000000002ec .L0 
     /tmp/ccwpPJqp.s:949    .text:00000000000002f4 .L0 
     /tmp/ccwpPJqp.s:959    .text:0000000000000304 .L0 
     /tmp/ccwpPJqp.s:960    .text:0000000000000304 .L0 
     /tmp/ccwpPJqp.s:966    .text:0000000000000310 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 48


     /tmp/ccwpPJqp.s:967    .text:0000000000000310 .L0 
     /tmp/ccwpPJqp.s:972    .text:0000000000000314 .L0 
     /tmp/ccwpPJqp.s:974    .text:0000000000000318 .L0 
     /tmp/ccwpPJqp.s:975    .text:0000000000000318 .L0 
     /tmp/ccwpPJqp.s:978    .text:0000000000000320 .L0 
     /tmp/ccwpPJqp.s:979    .text:0000000000000320 .L0 
src/Code/InterruptHandling/Riscv.cpp:123    .text:0000000000000324 .L0 
     /tmp/ccwpPJqp.s:992    .text:000000000000032c .L0 
     /tmp/ccwpPJqp.s:993    .text:000000000000032c .L0 
src/Code/InterruptHandling/Riscv.cpp:130    .text:000000000000032c .L0 
     /tmp/ccwpPJqp.s:1000   .text:0000000000000330 .L0 
     /tmp/ccwpPJqp.s:1001   .text:0000000000000330 .L0 
src/Code/InterruptHandling/Riscv.cpp:132    .text:0000000000000330 .L0 
     /tmp/ccwpPJqp.s:1007   .text:0000000000000334 .L0 
     /tmp/ccwpPJqp.s:1009   .text:0000000000000334 .L0 
     /tmp/ccwpPJqp.s:1015   .text:0000000000000344 .L0 
     /tmp/ccwpPJqp.s:1023   .text:000000000000034c .L0 
     /tmp/ccwpPJqp.s:1024   .text:000000000000034c .L0 
src/Code/InterruptHandling/Riscv.cpp:141    .text:000000000000034c .L0 
     /tmp/ccwpPJqp.s:1031   .text:0000000000000350 .L0 
     /tmp/ccwpPJqp.s:1033   .text:0000000000000350 .L0 
     /tmp/ccwpPJqp.s:1036   .text:0000000000000358 .L0 
src/Code/InterruptHandling/Riscv.cpp:146    .text:0000000000000358 .L0 
     /tmp/ccwpPJqp.s:1049   .text:0000000000000360 .L0 
     /tmp/ccwpPJqp.s:1050   .text:0000000000000360 .L0 
src/Code/InterruptHandling/Riscv.cpp:152    .text:0000000000000360 .L0 
     /tmp/ccwpPJqp.s:1057   .text:0000000000000364 .L0 
     /tmp/ccwpPJqp.s:1059   .text:0000000000000364 .L0 
     /tmp/ccwpPJqp.s:1062   .text:000000000000036c .L0 
     /tmp/ccwpPJqp.s:1063   .text:000000000000036c .L0 
     /tmp/ccwpPJqp.s:1069   .text:0000000000000378 .L0 
     /tmp/ccwpPJqp.s:1070   .text:0000000000000378 .L0 
     /tmp/ccwpPJqp.s:1075   .text:000000000000037c .L0 
     /tmp/ccwpPJqp.s:1077   .text:0000000000000380 .L0 
src/Code/InterruptHandling/Riscv.cpp:157    .text:0000000000000380 .L0 
     /tmp/ccwpPJqp.s:1086   .text:0000000000000388 .L0 
src/Code/InterruptHandling/Riscv.cpp:158    .text:0000000000000388 .L0 
     /tmp/ccwpPJqp.s:1098   .text:0000000000000390 .L0 
     /tmp/ccwpPJqp.s:1099   .text:0000000000000390 .L0 
src/Code/InterruptHandling/Riscv.cpp:164    .text:0000000000000390 .L0 
     /tmp/ccwpPJqp.s:1106   .text:0000000000000394 .L0 
     /tmp/ccwpPJqp.s:1108   .text:0000000000000394 .L0 
     /tmp/ccwpPJqp.s:1116   .text:00000000000003a0 .L0 
     /tmp/ccwpPJqp.s:1117   .text:00000000000003a0 .L0 
src/Code/InterruptHandling/Riscv.cpp:173    .text:00000000000003a0 .L0 
     /tmp/ccwpPJqp.s:1124   .text:00000000000003a4 .L0 
     /tmp/ccwpPJqp.s:1126   .text:00000000000003a4 .L0 
     /tmp/ccwpPJqp.s:1129   .text:00000000000003ac .L0 
     /tmp/ccwpPJqp.s:1130   .text:00000000000003ac .L0 
     /tmp/ccwpPJqp.s:1133   .text:00000000000003b4 .L0 
src/Code/InterruptHandling/Riscv.cpp:182    .text:00000000000003b4 .L0 
     /tmp/ccwpPJqp.s:1145   .text:00000000000003bc .L0 
     /tmp/ccwpPJqp.s:1146   .text:00000000000003bc .L0 
     /tmp/ccwpPJqp.s:1151   .text:00000000000003cc .L0 
src/Code/InterruptHandling/Riscv.cpp:189    .text:00000000000003cc .L0 
     /tmp/ccwpPJqp.s:1164   .text:00000000000003d4 .L0 
     /tmp/ccwpPJqp.s:1165   .text:00000000000003d4 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 49


src/Code/InterruptHandling/Riscv.cpp:195    .text:00000000000003d4 .L0 
     /tmp/ccwpPJqp.s:1174   .text:00000000000003dc .L0 
     /tmp/ccwpPJqp.s:1175   .text:00000000000003dc .L0 
     /tmp/ccwpPJqp.s:1187   .text:00000000000003f4 .L0 
     /tmp/ccwpPJqp.s:1188   .text:00000000000003f4 .L0 
     /tmp/ccwpPJqp.s:1189   .text:00000000000003f4 .L0 
     /tmp/ccwpPJqp.s:1196   .text:00000000000003fc .L0 
     /tmp/ccwpPJqp.s:1219   .text:0000000000000400 .L0 
     /tmp/ccwpPJqp.s:1220   .text:0000000000000400 .L0 
     /tmp/ccwpPJqp.s:1224   .text:0000000000000404 .L0 
     /tmp/ccwpPJqp.s:1225   .text:0000000000000404 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:215    .text:0000000000000404 .L0 
     /tmp/ccwpPJqp.s:1233   .text:000000000000040c .L0 
     /tmp/ccwpPJqp.s:1234   .text:000000000000040c .L0 
     /tmp/ccwpPJqp.s:1240   .text:0000000000000410 .L0 
     /tmp/ccwpPJqp.s:1241   .text:0000000000000410 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:185    .text:0000000000000410 .L0 
     /tmp/ccwpPJqp.s:1249   .text:0000000000000418 .L0 
     /tmp/ccwpPJqp.s:1250   .text:0000000000000418 .L0 
     /tmp/ccwpPJqp.s:1254   .text:000000000000041c .L0 
     /tmp/ccwpPJqp.s:1260   .text:0000000000000428 .L0 
     /tmp/ccwpPJqp.s:1261   .text:0000000000000428 .L0 
     /tmp/ccwpPJqp.s:1265   .text:000000000000042c .L0 
     /tmp/ccwpPJqp.s:1266   .text:000000000000042c .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:215    .text:000000000000042c .L0 
     /tmp/ccwpPJqp.s:1274   .text:0000000000000434 .L0 
     /tmp/ccwpPJqp.s:1275   .text:0000000000000434 .L0 
     /tmp/ccwpPJqp.s:1281   .text:0000000000000438 .L0 
     /tmp/ccwpPJqp.s:1282   .text:0000000000000438 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:185    .text:0000000000000438 .L0 
     /tmp/ccwpPJqp.s:1290   .text:0000000000000440 .L0 
     /tmp/ccwpPJqp.s:1291   .text:0000000000000440 .L0 
     /tmp/ccwpPJqp.s:1295   .text:0000000000000444 .L0 
     /tmp/ccwpPJqp.s:1301   .text:0000000000000450 .L0 
     /tmp/ccwpPJqp.s:1302   .text:0000000000000450 .L0 
     /tmp/ccwpPJqp.s:1306   .text:0000000000000454 .L0 
     /tmp/ccwpPJqp.s:1307   .text:0000000000000454 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:215    .text:0000000000000454 .L0 
     /tmp/ccwpPJqp.s:1315   .text:000000000000045c .L0 
     /tmp/ccwpPJqp.s:1316   .text:000000000000045c .L0 
     /tmp/ccwpPJqp.s:1322   .text:0000000000000460 .L0 
     /tmp/ccwpPJqp.s:1323   .text:0000000000000460 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:185    .text:0000000000000460 .L0 
     /tmp/ccwpPJqp.s:1331   .text:0000000000000468 .L0 
     /tmp/ccwpPJqp.s:1332   .text:0000000000000468 .L0 
     /tmp/ccwpPJqp.s:1336   .text:000000000000046c .L0 
     /tmp/ccwpPJqp.s:1346   .text:0000000000000478 .L0 
     /tmp/ccwpPJqp.s:1347   .text:0000000000000478 .L0 
     /tmp/ccwpPJqp.s:1348   .text:0000000000000478 .L0 
     /tmp/ccwpPJqp.s:1358   .text:0000000000000480 .L0 
     /tmp/ccwpPJqp.s:1359   .text:0000000000000480 .L0 
     /tmp/ccwpPJqp.s:1362   .text:0000000000000488 .L0 
     /tmp/ccwpPJqp.s:1363   .text:0000000000000488 .L0 
     /tmp/ccwpPJqp.s:1369   .text:000000000000049c .L0 
     /tmp/ccwpPJqp.s:1370   .text:000000000000049c .L0 
     /tmp/ccwpPJqp.s:1376   .text:00000000000004a8 .L0 
     /tmp/ccwpPJqp.s:1377   .text:00000000000004a8 .L0 
GAS LISTING /tmp/ccwpPJqp.s 			page 50


     /tmp/ccwpPJqp.s:1382   .text:00000000000004ac .L0 
     /tmp/ccwpPJqp.s:1387   .text:00000000000004b0 .L0 
     /tmp/ccwpPJqp.s:1388   .text:00000000000004b0 .L0 
     /tmp/ccwpPJqp.s:1389   .text:00000000000004b0 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:185    .text:00000000000004b0 .L0 
     /tmp/ccwpPJqp.s:1397   .text:00000000000004b8 .L0 
     /tmp/ccwpPJqp.s:1398   .text:00000000000004b8 .L0 
     /tmp/ccwpPJqp.s:1402   .text:00000000000004bc .L0 
     /tmp/ccwpPJqp.s:1406   .text:00000000000004c0 .L0 
     /tmp/ccwpPJqp.s:1407   .text:00000000000004c0 .L0 
     /tmp/ccwpPJqp.s:1408   .text:00000000000004c0 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:121    .text:00000000000004c0 .L0 
     /tmp/ccwpPJqp.s:1416   .text:00000000000004c8 .L0 
     /tmp/ccwpPJqp.s:1417   .text:00000000000004c8 .L0 
     /tmp/ccwpPJqp.s:1421   .text:00000000000004cc .L0 
     /tmp/ccwpPJqp.s:1423   .text:00000000000004d0 .L0 
     /tmp/ccwpPJqp.s:1424   .text:00000000000004d0 .L0 
     /tmp/ccwpPJqp.s:1427   .text:00000000000004dc .L0 
     /tmp/ccwpPJqp.s:1428   .text:00000000000004dc .L0 
     /tmp/ccwpPJqp.s:1431   .text:00000000000004e4 .L0 
     /tmp/ccwpPJqp.s:1432   .text:00000000000004e4 .L0 
     /tmp/ccwpPJqp.s:1437   .text:00000000000004e8 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:190    .text:00000000000004e8 .L0 
     /tmp/ccwpPJqp.s:1447   .text:00000000000004ec .L0 
     /tmp/ccwpPJqp.s:1448   .text:00000000000004ec .L0 
     /tmp/ccwpPJqp.s:1453   .text:00000000000004f0 .L0 
src/Code/InterruptHandling/../../../h/Code/InterruptHandling/Riscv.hpp:126    .text:00000000000004f0 .L0 
     /tmp/ccwpPJqp.s:1460   .text:00000000000004f4 .L0 
     /tmp/ccwpPJqp.s:1473   .text:00000000000004f8 .L0 
     /tmp/ccwpPJqp.s:1474   .text:00000000000004f8 .L0 
     /tmp/ccwpPJqp.s:1475   .text:00000000000004f8 .L0 
     /tmp/ccwpPJqp.s:1479   .text:0000000000000508 .L0 
     /tmp/ccwpPJqp.s:1483   .text:0000000000000510 .L0 
     /tmp/ccwpPJqp.s:1484   .text:0000000000000510 .L0 
     /tmp/ccwpPJqp.s:1487   .text:000000000000051c .L0 
     /tmp/ccwpPJqp.s:1490   .text:0000000000000520 .L0 
     /tmp/ccwpPJqp.s:1491   .text:0000000000000520 .L0 
     /tmp/ccwpPJqp.s:1498   .text:0000000000000534 .L0 
     /tmp/ccwpPJqp.s:1508   .text:0000000000000538 .L0 
     /tmp/ccwpPJqp.s:1519   .text:0000000000000538 .L0 
     /tmp/ccwpPJqp.s:864    .text:0000000000000298 .L0 
     /tmp/ccwpPJqp.s:960    .text:0000000000000304 .L0 
     /tmp/ccwpPJqp.s:1063   .text:000000000000036c .L0 
     /tmp/ccwpPJqp.s:1363   .text:0000000000000488 .L0 
     /tmp/ccwpPJqp.s:1370   .text:000000000000049c .L0 
     /tmp/ccwpPJqp.s:1424   .text:00000000000004d0 .L0 
     /tmp/ccwpPJqp.s:1475   .text:00000000000004f8 .L0 
     /tmp/ccwpPJqp.s:1484   .text:0000000000000510 .L0 
     /tmp/ccwpPJqp.s:206    .text:00000000000000e4 .L4
     /tmp/ccwpPJqp.s:1198   .text:0000000000000400 .L33
     /tmp/ccwpPJqp.s:1257   .text:0000000000000428 .L34
     /tmp/ccwpPJqp.s:1298   .text:0000000000000450 .L35
     /tmp/ccwpPJqp.s:1339   .text:0000000000000478 .L36
     /tmp/ccwpPJqp.s:757    .text:0000000000000234 .L25
     /tmp/ccwpPJqp.s:1462   .text:00000000000004f8 .L30
     /tmp/ccwpPJqp.s:663    .text:00000000000001e8 .L37
     /tmp/ccwpPJqp.s:783    .text:0000000000000250 .L38
GAS LISTING /tmp/ccwpPJqp.s 			page 51


     /tmp/ccwpPJqp.s:817    .text:0000000000000274 .L39
     /tmp/ccwpPJqp.s:860    .text:0000000000000298 .L40
     /tmp/ccwpPJqp.s:882    .text:00000000000002b8 .L41
     /tmp/ccwpPJqp.s:889    .text:00000000000002c4 .L42
     /tmp/ccwpPJqp.s:932    .text:00000000000002e8 .L43
     /tmp/ccwpPJqp.s:955    .text:0000000000000304 .L44
     /tmp/ccwpPJqp.s:988    .text:000000000000032c .L45
     /tmp/ccwpPJqp.s:1019   .text:000000000000034c .L46
     /tmp/ccwpPJqp.s:1045   .text:0000000000000360 .L47
     /tmp/ccwpPJqp.s:1093   .text:0000000000000390 .L48
     /tmp/ccwpPJqp.s:1112   .text:00000000000003a0 .L49
     /tmp/ccwpPJqp.s:1141   .text:00000000000003bc .L50
     /tmp/ccwpPJqp.s:1160   .text:00000000000003d4 .L51
     /tmp/ccwpPJqp.s:1183   .text:00000000000003f4 .L52
     /tmp/ccwpPJqp.s:706    .text:0000000000000208 .L8
     /tmp/ccwpPJqp.s:1084   .text:0000000000000388 .L19
     /tmp/ccwpPJqp.s:185    .text:00000000000000cc .L29
     /tmp/ccwpPJqp.s:4246   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccwpPJqp.s:6073   .debug_str:00000000000010a9 .LASF275
     /tmp/ccwpPJqp.s:5659   .debug_str:00000000000000ff .LASF276
     /tmp/ccwpPJqp.s:6091   .debug_str:00000000000011f5 .LASF277
     /tmp/ccwpPJqp.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccwpPJqp.s:1511   .text:0000000000000538 .Letext0
     /tmp/ccwpPJqp.s:5631   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccwpPJqp.s:5819   .debug_str:0000000000000710 .LASF0
     /tmp/ccwpPJqp.s:5851   .debug_str:0000000000000888 .LASF1
     /tmp/ccwpPJqp.s:5989   .debug_str:0000000000000e10 .LASF2
     /tmp/ccwpPJqp.s:5637   .debug_str:0000000000000024 .LASF3
     /tmp/ccwpPJqp.s:6005   .debug_str:0000000000000e99 .LASF4
     /tmp/ccwpPJqp.s:5829   .debug_str:0000000000000781 .LASF5
     /tmp/ccwpPJqp.s:5655   .debug_str:00000000000000e4 .LASF6
     /tmp/ccwpPJqp.s:5937   .debug_str:0000000000000c1c .LASF7
     /tmp/ccwpPJqp.s:5841   .debug_str:0000000000000828 .LASF8
     /tmp/ccwpPJqp.s:5791   .debug_str:00000000000005e4 .LASF9
     /tmp/ccwpPJqp.s:5803   .debug_str:000000000000065c .LASF10
     /tmp/ccwpPJqp.s:5699   .debug_str:0000000000000294 .LASF11
     /tmp/ccwpPJqp.s:5779   .debug_str:000000000000058d .LASF12
     /tmp/ccwpPJqp.s:5719   .debug_str:0000000000000371 .LASF13
     /tmp/ccwpPJqp.s:5697   .debug_str:0000000000000284 .LASF14
     /tmp/ccwpPJqp.s:6047   .debug_str:0000000000000ffc .LASF15
     /tmp/ccwpPJqp.s:5755   .debug_str:00000000000004bd .LASF16
     /tmp/ccwpPJqp.s:6027   .debug_str:0000000000000f36 .LASF17
     /tmp/ccwpPJqp.s:6139   .debug_str:0000000000001400 .LASF79
     /tmp/ccwpPJqp.s:6125   .debug_str:0000000000001386 .LASF21
     /tmp/ccwpPJqp.s:5769   .debug_str:0000000000000531 .LASF18
     /tmp/ccwpPJqp.s:6071   .debug_str:000000000000109c .LASF19
     /tmp/ccwpPJqp.s:5735   .debug_str:0000000000000406 .LASF20
     /tmp/ccwpPJqp.s:5971   .debug_str:0000000000000d5c .LASF22
     /tmp/ccwpPJqp.s:5857   .debug_str:00000000000008ae .LASF23
     /tmp/ccwpPJqp.s:6161   .debug_str:00000000000014c9 .LASF24
     /tmp/ccwpPJqp.s:6155   .debug_str:000000000000148b .LASF25
     /tmp/ccwpPJqp.s:5801   .debug_str:0000000000000640 .LASF27
     /tmp/ccwpPJqp.s:5687   .debug_str:0000000000000225 .LASF26
     /tmp/ccwpPJqp.s:5815   .debug_str:00000000000006d4 .LASF28
     /tmp/ccwpPJqp.s:5661   .debug_str:0000000000000124 .LASF29
     /tmp/ccwpPJqp.s:6115   .debug_str:000000000000130a .LASF30
     /tmp/ccwpPJqp.s:5975   .debug_str:0000000000000d7d .LASF31
GAS LISTING /tmp/ccwpPJqp.s 			page 52


     /tmp/ccwpPJqp.s:6135   .debug_str:00000000000013cb .LASF32
     /tmp/ccwpPJqp.s:5759   .debug_str:00000000000004e9 .LASF33
     /tmp/ccwpPJqp.s:6171   .debug_str:000000000000150b .LASF34
     /tmp/ccwpPJqp.s:6065   .debug_str:0000000000001076 .LASF41
     /tmp/ccwpPJqp.s:5649   .debug_str:00000000000000ac .LASF43
     /tmp/ccwpPJqp.s:5761   .debug_str:00000000000004fc .LASF35
     /tmp/ccwpPJqp.s:5993   .debug_str:0000000000000e2b .LASF37
     /tmp/ccwpPJqp.s:5683   .debug_str:00000000000001fb .LASF36
     /tmp/ccwpPJqp.s:5787   .debug_str:00000000000005b8 .LASF38
     /tmp/ccwpPJqp.s:6117   .debug_str:0000000000001329 .LASF39
     /tmp/ccwpPJqp.s:5935   .debug_str:0000000000000bfa .LASF40
     /tmp/ccwpPJqp.s:5951   .debug_str:0000000000000cba .LASF42
     /tmp/ccwpPJqp.s:5725   .debug_str:00000000000003b9 .LASF44
     /tmp/ccwpPJqp.s:6021   .debug_str:0000000000000f0b .LASF45
     /tmp/ccwpPJqp.s:6009   .debug_str:0000000000000ea5 .LASF46
     /tmp/ccwpPJqp.s:6033   .debug_str:0000000000000f77 .LASF47
     /tmp/ccwpPJqp.s:5933   .debug_str:0000000000000bde .LASF48
     /tmp/ccwpPJqp.s:5653   .debug_str:00000000000000d3 .LASF49
     /tmp/ccwpPJqp.s:5957   .debug_str:0000000000000cec .LASF50
     /tmp/ccwpPJqp.s:5939   .debug_str:0000000000000c2f .LASF51
     /tmp/ccwpPJqp.s:5717   .debug_str:000000000000035d .LASF52
     /tmp/ccwpPJqp.s:6013   .debug_str:0000000000000ecb .LASF53
     /tmp/ccwpPJqp.s:5999   .debug_str:0000000000000e5f .LASF54
     /tmp/ccwpPJqp.s:6023   .debug_str:0000000000000f14 .LASF55
     /tmp/ccwpPJqp.s:5927   .debug_str:0000000000000ba8 .LASF56
     /tmp/ccwpPJqp.s:5635   .debug_str:0000000000000013 .LASF57
     /tmp/ccwpPJqp.s:5949   .debug_str:0000000000000c9c .LASF58
     /tmp/ccwpPJqp.s:5901   .debug_str:0000000000000a96 .LASF59
     /tmp/ccwpPJqp.s:5749   .debug_str:000000000000047b .LASF60
     /tmp/ccwpPJqp.s:5691   .debug_str:000000000000024b .LASF61
     /tmp/ccwpPJqp.s:6095   .debug_str:0000000000001224 .LASF62
     /tmp/ccwpPJqp.s:5855   .debug_str:00000000000008a5 .LASF63
     /tmp/ccwpPJqp.s:5909   .debug_str:0000000000000b04 .LASF64
     /tmp/ccwpPJqp.s:5967   .debug_str:0000000000000d42 .LASF65
     /tmp/ccwpPJqp.s:5757   .debug_str:00000000000004d3 .LASF66
     /tmp/ccwpPJqp.s:5785   .debug_str:00000000000005ad .LASF67
     /tmp/ccwpPJqp.s:5799   .debug_str:0000000000000628 .LASF68
     /tmp/ccwpPJqp.s:5919   .debug_str:0000000000000b59 .LASF69
     /tmp/ccwpPJqp.s:5703   .debug_str:00000000000002a8 .LASF70
     /tmp/ccwpPJqp.s:5713   .debug_str:0000000000000333 .LASF71
     /tmp/ccwpPJqp.s:5771   .debug_str:000000000000053d .LASF72
     /tmp/ccwpPJqp.s:5727   .debug_str:00000000000003cd .LASF73
     /tmp/ccwpPJqp.s:6017   .debug_str:0000000000000ee5 .LASF74
     /tmp/ccwpPJqp.s:5981   .debug_str:0000000000000dc9 .LASF75
     /tmp/ccwpPJqp.s:5731   .debug_str:00000000000003e6 .LASF76
     /tmp/ccwpPJqp.s:5995   .debug_str:0000000000000e45 .LASF77
     /tmp/ccwpPJqp.s:5807   .debug_str:000000000000067a .LASF78
     /tmp/ccwpPJqp.s:5943   .debug_str:0000000000000c6b .LASF163
     /tmp/ccwpPJqp.s:5837   .debug_str:00000000000007e9 .LASF165
     /tmp/ccwpPJqp.s:5931   .debug_str:0000000000000bce .LASF80
     /tmp/ccwpPJqp.s:5789   .debug_str:00000000000005d8 .LASF102
     /tmp/ccwpPJqp.s:5849   .debug_str:0000000000000883 .LASF81
     /tmp/ccwpPJqp.s:5701   .debug_str:00000000000002a3 .LASF82
     /tmp/ccwpPJqp.s:5673   .debug_str:00000000000001aa .LASF83
     /tmp/ccwpPJqp.s:6159   .debug_str:00000000000014bd .LASF84
     /tmp/ccwpPJqp.s:5889   .debug_str:0000000000000a0b .LASF85
     /tmp/ccwpPJqp.s:5831   .debug_str:0000000000000793 .LASF87
GAS LISTING /tmp/ccwpPJqp.s 			page 53


     /tmp/ccwpPJqp.s:5733   .debug_str:00000000000003fc .LASF86
     /tmp/ccwpPJqp.s:6123   .debug_str:000000000000136a .LASF88
     /tmp/ccwpPJqp.s:5895   .debug_str:0000000000000a45 .LASF89
     /tmp/ccwpPJqp.s:5899   .debug_str:0000000000000a6e .LASF90
     /tmp/ccwpPJqp.s:6143   .debug_str:000000000000140b .LASF91
     /tmp/ccwpPJqp.s:5905   .debug_str:0000000000000aba .LASF92
     /tmp/ccwpPJqp.s:5669   .debug_str:0000000000000170 .LASF93
     /tmp/ccwpPJqp.s:5665   .debug_str:000000000000014d .LASF94
     /tmp/ccwpPJqp.s:5881   .debug_str:00000000000009c7 .LASF95
     /tmp/ccwpPJqp.s:5893   .debug_str:0000000000000a3b .LASF96
     /tmp/ccwpPJqp.s:5839   .debug_str:000000000000080b .LASF97
     /tmp/ccwpPJqp.s:5693   .debug_str:0000000000000258 .LASF98
     /tmp/ccwpPJqp.s:6003   .debug_str:0000000000000e84 .LASF99
     /tmp/ccwpPJqp.s:6173   .debug_str:000000000000152b .LASF278
     /tmp/ccwpPJqp.s:5813   .debug_str:00000000000006bc .LASF279
     /tmp/ccwpPJqp.s:6169   .debug_str:00000000000014f9 .LASF105
     /tmp/ccwpPJqp.s:6019   .debug_str:0000000000000efd .LASF100
     /tmp/ccwpPJqp.s:5863   .debug_str:00000000000008f6 .LASF101
     /tmp/ccwpPJqp.s:6057   .debug_str:0000000000001033 .LASF103
     /tmp/ccwpPJqp.s:6045   .debug_str:0000000000000fef .LASF104
     /tmp/ccwpPJqp.s:5977   .debug_str:0000000000000d8e .LASF106
     /tmp/ccwpPJqp.s:5923   .debug_str:0000000000000b78 .LASF280
     /tmp/ccwpPJqp.s:5911   .debug_str:0000000000000b19 .LASF107
     /tmp/ccwpPJqp.s:5903   .debug_str:0000000000000aa2 .LASF108
     /tmp/ccwpPJqp.s:5891   .debug_str:0000000000000a2f .LASF109
     /tmp/ccwpPJqp.s:6103   .debug_str:0000000000001262 .LASF110
     /tmp/ccwpPJqp.s:5879   .debug_str:00000000000009ba .LASF111
     /tmp/ccwpPJqp.s:6081   .debug_str:00000000000011a2 .LASF112
     /tmp/ccwpPJqp.s:5965   .debug_str:0000000000000d3a .LASF113
     /tmp/ccwpPJqp.s:5825   .debug_str:0000000000000755 .LASF114
     /tmp/ccwpPJqp.s:5767   .debug_str:000000000000051a .LASF115
     /tmp/ccwpPJqp.s:5835   .debug_str:00000000000007c6 .LASF116
     /tmp/ccwpPJqp.s:5695   .debug_str:000000000000026d .LASF117
     /tmp/ccwpPJqp.s:5809   .debug_str:0000000000000692 .LASF118
     /tmp/ccwpPJqp.s:6153   .debug_str:0000000000001474 .LASF119
     /tmp/ccwpPJqp.s:5643   .debug_str:0000000000000049 .LASF120
     /tmp/ccwpPJqp.s:5915   .debug_str:0000000000000b2a .LASF121
     /tmp/ccwpPJqp.s:5875   .debug_str:000000000000097a .LASF122
     /tmp/ccwpPJqp.s:6029   .debug_str:0000000000000f4c .LASF123
     /tmp/ccwpPJqp.s:5715   .debug_str:000000000000033d .LASF124
     /tmp/ccwpPJqp.s:5675   .debug_str:00000000000001af .LASF125
     /tmp/ccwpPJqp.s:5705   .debug_str:00000000000002c1 .LASF126
     /tmp/ccwpPJqp.s:5751   .debug_str:0000000000000494 .LASF127
     /tmp/ccwpPJqp.s:5671   .debug_str:0000000000000189 .LASF128
     /tmp/ccwpPJqp.s:5953   .debug_str:0000000000000cc2 .LASF129
     /tmp/ccwpPJqp.s:6147   .debug_str:000000000000142f .LASF130
     /tmp/ccwpPJqp.s:5921   .debug_str:0000000000000b65 .LASF131
     /tmp/ccwpPJqp.s:6195   .debug_str:00000000000015fa .LASF132
     /tmp/ccwpPJqp.s:5883   .debug_str:00000000000009db .LASF133
     /tmp/ccwpPJqp.s:5907   .debug_str:0000000000000ae5 .LASF134
     /tmp/ccwpPJqp.s:5633   .debug_str:0000000000000000 .LASF135
     /tmp/ccwpPJqp.s:5847   .debug_str:0000000000000863 .LASF136
     /tmp/ccwpPJqp.s:5747   .debug_str:000000000000046e .LASF137
     /tmp/ccwpPJqp.s:5645   .debug_str:000000000000006c .LASF138
     /tmp/ccwpPJqp.s:6127   .debug_str:0000000000001395 .LASF139
     /tmp/ccwpPJqp.s:5817   .debug_str:00000000000006f7 .LASF140
     /tmp/ccwpPJqp.s:5663   .debug_str:0000000000000136 .LASF141
GAS LISTING /tmp/ccwpPJqp.s 			page 54


     /tmp/ccwpPJqp.s:6121   .debug_str:0000000000001347 .LASF142
     /tmp/ccwpPJqp.s:5685   .debug_str:000000000000020e .LASF143
     /tmp/ccwpPJqp.s:5721   .debug_str:0000000000000381 .LASF144
     /tmp/ccwpPJqp.s:5833   .debug_str:00000000000007af .LASF145
     /tmp/ccwpPJqp.s:6061   .debug_str:0000000000001040 .LASF146
     /tmp/ccwpPJqp.s:5979   .debug_str:0000000000000db2 .LASF147
     /tmp/ccwpPJqp.s:6157   .debug_str:000000000000149a .LASF148
     /tmp/ccwpPJqp.s:5781   .debug_str:000000000000059c .LASF149
     /tmp/ccwpPJqp.s:5845   .debug_str:000000000000084b .LASF150
     /tmp/ccwpPJqp.s:6183   .debug_str:000000000000157f .LASF151
     /tmp/ccwpPJqp.s:5797   .debug_str:000000000000061c .LASF152
     /tmp/ccwpPJqp.s:5689   .debug_str:000000000000023b .LASF153
     /tmp/ccwpPJqp.s:6049   .debug_str:0000000000001008 .LASF154
     /tmp/ccwpPJqp.s:5821   .debug_str:000000000000071d .LASF155
     /tmp/ccwpPJqp.s:5873   .debug_str:000000000000096d .LASF156
     /tmp/ccwpPJqp.s:6025   .debug_str:0000000000000f23 .LASF157
     /tmp/ccwpPJqp.s:5991   .debug_str:0000000000000e1e .LASF158
     /tmp/ccwpPJqp.s:6007   .debug_str:0000000000000ea0 .LASF159
     /tmp/ccwpPJqp.s:6093   .debug_str:0000000000001218 .LASF160
     /tmp/ccwpPJqp.s:5651   .debug_str:00000000000000c5 .LASF281
     /tmp/ccwpPJqp.s:6075   .debug_str:000000000000116d .LASF169
     /tmp/ccwpPJqp.s:5865   .debug_str:0000000000000904 .LASF171
     /tmp/ccwpPJqp.s:5955   .debug_str:0000000000000cd5 .LASF161
     /tmp/ccwpPJqp.s:5917   .debug_str:0000000000000b41 .LASF162
     /tmp/ccwpPJqp.s:5741   .debug_str:000000000000044e .LASF164
     /tmp/ccwpPJqp.s:5709   .debug_str:00000000000002f7 .LASF166
     /tmp/ccwpPJqp.s:5947   .debug_str:0000000000000c8e .LASF167
     /tmp/ccwpPJqp.s:5859   .debug_str:00000000000008b7 .LASF168
     /tmp/ccwpPJqp.s:5729   .debug_str:00000000000003d8 .LASF170
     /tmp/ccwpPJqp.s:5647   .debug_str:0000000000000084 .LASF172
     /tmp/ccwpPJqp.s:6015   .debug_str:0000000000000ed4 .LASF181
     /tmp/ccwpPJqp.s:5641   .debug_str:0000000000000044 .LASF173
     /tmp/ccwpPJqp.s:6087   .debug_str:00000000000011d5 .LASF174
     /tmp/ccwpPJqp.s:6177   .debug_str:000000000000154c .LASF175
     /tmp/ccwpPJqp.s:6097   .debug_str:000000000000123e .LASF176
     /tmp/ccwpPJqp.s:6055   .debug_str:000000000000102a .LASF177
     /tmp/ccwpPJqp.s:6063   .debug_str:0000000000001062 .LASF178
     /tmp/ccwpPJqp.s:5983   .debug_str:0000000000000dd3 .LASF179
     /tmp/ccwpPJqp.s:5765   .debug_str:0000000000000510 .LASF180
     /tmp/ccwpPJqp.s:6067   .debug_str:0000000000001082 .LASF182
     /tmp/ccwpPJqp.s:6131   .debug_str:00000000000013bc .LASF183
     /tmp/ccwpPJqp.s:5843   .debug_str:000000000000083b .LASF184
     /tmp/ccwpPJqp.s:5969   .debug_str:0000000000000d4c .LASF185
     /tmp/ccwpPJqp.s:5867   .debug_str:0000000000000937 .LASF186
     /tmp/ccwpPJqp.s:5723   .debug_str:00000000000003a5 .LASF187
     /tmp/ccwpPJqp.s:5997   .debug_str:0000000000000e50 .LASF188
     /tmp/ccwpPJqp.s:6119   .debug_str:000000000000133e .LASF189
     /tmp/ccwpPJqp.s:6193   .debug_str:00000000000015f5 .LASF190
     /tmp/ccwpPJqp.s:6037   .debug_str:0000000000000f95 .LASF191
     /tmp/ccwpPJqp.s:6011   .debug_str:0000000000000eba .LASF192
     /tmp/ccwpPJqp.s:6039   .debug_str:0000000000000fa5 .LASF193
     /tmp/ccwpPJqp.s:5987   .debug_str:0000000000000e00 .LASF194
     /tmp/ccwpPJqp.s:5823   .debug_str:000000000000072d .LASF195
     /tmp/ccwpPJqp.s:6079   .debug_str:0000000000001193 .LASF196
     /tmp/ccwpPJqp.s:5773   .debug_str:0000000000000553 .LASF197
     /tmp/ccwpPJqp.s:5743   .debug_str:0000000000000457 .LASF198
     /tmp/ccwpPJqp.s:6179   .debug_str:0000000000001552 .LASF199
GAS LISTING /tmp/ccwpPJqp.s 			page 55


     /tmp/ccwpPJqp.s:6053   .debug_str:0000000000001023 .LASF200
     /tmp/ccwpPJqp.s:6149   .debug_str:000000000000144e .LASF201
     /tmp/ccwpPJqp.s:5745   .debug_str:000000000000045c .LASF202
     /tmp/ccwpPJqp.s:5925   .debug_str:0000000000000b7d .LASF203
     /tmp/ccwpPJqp.s:5827   .debug_str:0000000000000768 .LASF204
     /tmp/ccwpPJqp.s:5707   .debug_str:00000000000002de .LASF205
     /tmp/ccwpPJqp.s:6129   .debug_str:00000000000013a2 .LASF206
     /tmp/ccwpPJqp.s:5681   .debug_str:00000000000001e1 .LASF207
     /tmp/ccwpPJqp.s:5753   .debug_str:00000000000004aa .LASF208
     /tmp/ccwpPJqp.s:6043   .debug_str:0000000000000fc4 .LASF209
     /tmp/ccwpPJqp.s:5985   .debug_str:0000000000000de7 .LASF210
     /tmp/ccwpPJqp.s:6109   .debug_str:000000000000129c .LASF211
     /tmp/ccwpPJqp.s:5639   .debug_str:000000000000002b .LASF212
     /tmp/ccwpPJqp.s:5793   .debug_str:00000000000005f4 .LASF213
     /tmp/ccwpPJqp.s:6111   .debug_str:00000000000012cd .LASF214
     /tmp/ccwpPJqp.s:5877   .debug_str:000000000000099e .LASF215
     /tmp/ccwpPJqp.s:5941   .debug_str:0000000000000c37 .LASF216
     /tmp/ccwpPJqp.s:6167   .debug_str:00000000000014ea .LASF217
     /tmp/ccwpPJqp.s:5963   .debug_str:0000000000000d27 .LASF218
     /tmp/ccwpPJqp.s:6085   .debug_str:00000000000011c2 .LASF219
     /tmp/ccwpPJqp.s:6059   .debug_str:000000000000103b .LASF220
     /tmp/ccwpPJqp.s:6101   .debug_str:0000000000001255 .LASF221
     /tmp/ccwpPJqp.s:6189   .debug_str:00000000000015d7 .LASF222
     /tmp/ccwpPJqp.s:5737   .debug_str:0000000000000412 .LASF223
     /tmp/ccwpPJqp.s:5805   .debug_str:000000000000066a .LASF224
     /tmp/ccwpPJqp.s:6187   .debug_str:00000000000015b2 .LASF225
     /tmp/ccwpPJqp.s:6191   .debug_str:00000000000015e7 .LASF226
     /tmp/ccwpPJqp.s:5667   .debug_str:000000000000015a .LASF227
     /tmp/ccwpPJqp.s:6181   .debug_str:000000000000156e .LASF228
     /tmp/ccwpPJqp.s:6185   .debug_str:000000000000158c .LASF229
     /tmp/ccwpPJqp.s:6165   .debug_str:00000000000014d9 .LASF230
     /tmp/ccwpPJqp.s:5861   .debug_str:00000000000008d0 .LASF231
     /tmp/ccwpPJqp.s:5657   .debug_str:00000000000000eb .LASF232
     /tmp/ccwpPJqp.s:5711   .debug_str:000000000000030a .LASF233
     /tmp/ccwpPJqp.s:5973   .debug_str:0000000000000d67 .LASF234
     /tmp/ccwpPJqp.s:6107   .debug_str:0000000000001286 .LASF235
     /tmp/ccwpPJqp.s:5739   .debug_str:0000000000000437 .LASF236
     /tmp/ccwpPJqp.s:5677   .debug_str:00000000000001c1 .LASF237
     /tmp/ccwpPJqp.s:6031   .debug_str:0000000000000f61 .LASF238
     /tmp/ccwpPJqp.s:5871   .debug_str:0000000000000956 .LASF239
     /tmp/ccwpPJqp.s:6137   .debug_str:00000000000013e9 .LASF240
     /tmp/ccwpPJqp.s:5679   .debug_str:00000000000001d8 .LASF241
     /tmp/ccwpPJqp.s:6083   .debug_str:00000000000011bb .LASF242
     /tmp/ccwpPJqp.s:5777   .debug_str:0000000000000588 .LASF243
     /tmp/ccwpPJqp.s:5913   .debug_str:0000000000000b25 .LASF244
     /tmp/ccwpPJqp.s:6099   .debug_str:0000000000001246 .LASF245
     /tmp/ccwpPJqp.s:5885   .debug_str:00000000000009ee .LASF246
     /tmp/ccwpPJqp.s:5853   .debug_str:000000000000089b .LASF247
     /tmp/ccwpPJqp.s:5929   .debug_str:0000000000000bc4 .LASF248
     /tmp/ccwpPJqp.s:46     .text:0000000000000020 .LFB51
     /tmp/ccwpPJqp.s:1509   .text:0000000000000538 .LFE51
     /tmp/ccwpPJqp.s:5959   .debug_str:0000000000000d0a .LASF249
     /tmp/ccwpPJqp.s:5589   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccwpPJqp.s:6141   .debug_str:0000000000001406 .LASF250
     /tmp/ccwpPJqp.s:6151   .debug_str:000000000000146c .LASF251
     /tmp/ccwpPJqp.s:6077   .debug_str:0000000000001187 .LASF252
     /tmp/ccwpPJqp.s:680    .text:00000000000001e8 .LBB293
GAS LISTING /tmp/ccwpPJqp.s 			page 56


     /tmp/ccwpPJqp.s:707    .text:0000000000000208 .LBE293
     /tmp/ccwpPJqp.s:6051   .debug_str:0000000000001014 .LASF253
     /tmp/ccwpPJqp.s:6001   .debug_str:0000000000000e74 .LASF254
     /tmp/ccwpPJqp.s:5330   .debug_loc:0000000000000000 .LLST31
     /tmp/ccwpPJqp.s:693    .text:00000000000001f8 .LVL8
     /tmp/ccwpPJqp.s:697    .text:0000000000000204 .LVL9
     /tmp/ccwpPJqp.s:789    .text:0000000000000250 .LBB278
     /tmp/ccwpPJqp.s:814    .text:0000000000000270 .LBE278
     /tmp/ccwpPJqp.s:5887   .debug_str:00000000000009fc .LASF255
     /tmp/ccwpPJqp.s:5795   .debug_str:0000000000000610 .LASF256
     /tmp/ccwpPJqp.s:5337   .debug_loc:0000000000000023 .LLST30
     /tmp/ccwpPJqp.s:802    .text:0000000000000260 .LVL15
     /tmp/ccwpPJqp.s:806    .text:000000000000026c .LVL16
     /tmp/ccwpPJqp.s:819    .text:0000000000000274 .LBB264
     /tmp/ccwpPJqp.s:857    .text:0000000000000294 .LBE264
     /tmp/ccwpPJqp.s:6163   .debug_str:00000000000014d2 .LASF257
     /tmp/ccwpPJqp.s:5344   .debug_loc:0000000000000046 .LLST26
     /tmp/ccwpPJqp.s:6175   .debug_str:000000000000153f .LASF258
     /tmp/ccwpPJqp.s:5351   .debug_loc:0000000000000069 .LLST27
     /tmp/ccwpPJqp.s:5358   .debug_loc:000000000000008c .LLST28
     /tmp/ccwpPJqp.s:5365   .debug_loc:00000000000000af .LLST29
     /tmp/ccwpPJqp.s:854    .text:0000000000000290 .LVL22
     /tmp/ccwpPJqp.s:891    .text:00000000000002c4 .LBB228
     /tmp/ccwpPJqp.s:929    .text:00000000000002e4 .LBE228
     /tmp/ccwpPJqp.s:5372   .debug_loc:00000000000000d2 .LLST20
     /tmp/ccwpPJqp.s:5379   .debug_loc:00000000000000f5 .LLST21
     /tmp/ccwpPJqp.s:5386   .debug_loc:0000000000000118 .LLST22
     /tmp/ccwpPJqp.s:5393   .debug_loc:000000000000013b .LLST23
     /tmp/ccwpPJqp.s:926    .text:00000000000002e0 .LVL32
     /tmp/ccwpPJqp.s:934    .text:00000000000002e8 .LBB218
     /tmp/ccwpPJqp.s:952    .text:0000000000000300 .LBE218
     /tmp/ccwpPJqp.s:5763   .debug_str:0000000000000509 .LASF259
     /tmp/ccwpPJqp.s:5400   .debug_loc:000000000000015e .LLST19
     /tmp/ccwpPJqp.s:947    .text:00000000000002f4 .LVL35
     /tmp/ccwpPJqp.s:951    .text:0000000000000300 .LVL36
     /tmp/ccwpPJqp.s:957    .text:0000000000000304 .LBB207
     /tmp/ccwpPJqp.s:986    .text:0000000000000328 .LBE207
     /tmp/ccwpPJqp.s:963    .text:0000000000000310 .LBB208
     /tmp/ccwpPJqp.s:970    .text:0000000000000314 .LBE208
     /tmp/ccwpPJqp.s:5407   .debug_loc:0000000000000181 .LLST18
     /tmp/ccwpPJqp.s:976    .text:0000000000000320 .LVL40
     /tmp/ccwpPJqp.s:990    .text:000000000000032c .LBB199
     /tmp/ccwpPJqp.s:1016   .text:0000000000000348 .LBE199
     /tmp/ccwpPJqp.s:5414   .debug_loc:00000000000001a4 .LLST16
     /tmp/ccwpPJqp.s:6089   .debug_str:00000000000011df .LASF260
     /tmp/ccwpPJqp.s:5421   .debug_loc:00000000000001c7 .LLST17
     /tmp/ccwpPJqp.s:1013   .text:0000000000000344 .LVL44
     /tmp/ccwpPJqp.s:1021   .text:000000000000034c .LBB192
     /tmp/ccwpPJqp.s:1042   .text:000000000000035c .LBE192
     /tmp/ccwpPJqp.s:5428   .debug_loc:00000000000001ea .LLST14
     /tmp/ccwpPJqp.s:5435   .debug_loc:000000000000020d .LLST15
     /tmp/ccwpPJqp.s:1034   .text:0000000000000358 .LVL47
     /tmp/ccwpPJqp.s:1047   .text:0000000000000360 .LBB184
     /tmp/ccwpPJqp.s:1094   .text:0000000000000390 .LBE184
     /tmp/ccwpPJqp.s:5775   .debug_str:000000000000057c .LASF261
     /tmp/ccwpPJqp.s:5442   .debug_loc:0000000000000230 .LLST12
     /tmp/ccwpPJqp.s:1066   .text:0000000000000378 .LBB185
GAS LISTING /tmp/ccwpPJqp.s 			page 57


     /tmp/ccwpPJqp.s:1073   .text:000000000000037c .LBE185
     /tmp/ccwpPJqp.s:5449   .debug_loc:0000000000000253 .LLST13
     /tmp/ccwpPJqp.s:1060   .text:000000000000036c .LVL50
     /tmp/ccwpPJqp.s:1096   .text:0000000000000390 .LBB179
     /tmp/ccwpPJqp.s:1110   .text:000000000000039c .LBE179
     /tmp/ccwpPJqp.s:5456   .debug_loc:0000000000000276 .LLST11
     /tmp/ccwpPJqp.s:1109   .text:000000000000039c .LVL54
     /tmp/ccwpPJqp.s:1114   .text:00000000000003a0 .LBB175
     /tmp/ccwpPJqp.s:1139   .text:00000000000003b8 .LBE175
     /tmp/ccwpPJqp.s:6113   .debug_str:0000000000001305 .LASF262
     /tmp/ccwpPJqp.s:5463   .debug_loc:0000000000000299 .LLST10
     /tmp/ccwpPJqp.s:1127   .text:00000000000003ac .LVL56
     /tmp/ccwpPJqp.s:1131   .text:00000000000003b4 .LVL57
     /tmp/ccwpPJqp.s:1143   .text:00000000000003bc .LBB172
     /tmp/ccwpPJqp.s:1157   .text:00000000000003d0 .LBE172
     /tmp/ccwpPJqp.s:6035   .debug_str:0000000000000f86 .LASF263
     /tmp/ccwpPJqp.s:5470   .debug_loc:00000000000002bc .LLST9
     /tmp/ccwpPJqp.s:1147   .text:00000000000003c4 .LVL58
     /tmp/ccwpPJqp.s:1149   .text:00000000000003cc .LVL59
     /tmp/ccwpPJqp.s:1162   .text:00000000000003d4 .LBB169
     /tmp/ccwpPJqp.s:1180   .text:00000000000003f0 .LBE169
     /tmp/ccwpPJqp.s:6069   .debug_str:000000000000108c .LASF264
     /tmp/ccwpPJqp.s:5477   .debug_loc:00000000000002df .LLST7
     /tmp/ccwpPJqp.s:1176   .text:00000000000003e4 .LVL62
     /tmp/ccwpPJqp.s:1179   .text:00000000000003f0 .LVL63
     /tmp/ccwpPJqp.s:217    .text:00000000000000e4 .LBB148
     /tmp/ccwpPJqp.s:232    .text:00000000000000f0 .LBE148
     /tmp/ccwpPJqp.s:238    .text:00000000000000f8 .LBB150
     /tmp/ccwpPJqp.s:253    .text:0000000000000104 .LBE150
     /tmp/ccwpPJqp.s:650    .text:00000000000001dc .LBB167
     /tmp/ccwpPJqp.s:665    .text:00000000000001e8 .LBE167
     /tmp/ccwpPJqp.s:5484   .debug_loc:0000000000000302 .LLST6
     /tmp/ccwpPJqp.s:1185   .text:00000000000003f4 .LBB170
     /tmp/ccwpPJqp.s:1200   .text:0000000000000400 .LBE170
     /tmp/ccwpPJqp.s:5493   .debug_loc:0000000000000328 .LLST8
     /tmp/ccwpPJqp.s:867    .text:00000000000002a4 .LBB250
     /tmp/ccwpPJqp.s:876    .text:00000000000002ac .LBE250
     /tmp/ccwpPJqp.s:5502   .debug_loc:000000000000034e .LLST24
     /tmp/ccwpPJqp.s:5510   .debug_loc:0000000000000372 .LLST25
     /tmp/ccwpPJqp.s:720    .text:0000000000000210 .LBB309
     /tmp/ccwpPJqp.s:731    .text:0000000000000214 .LBE309
     /tmp/ccwpPJqp.s:5517   .debug_loc:0000000000000395 .LLST32
     /tmp/ccwpPJqp.s:747    .text:0000000000000230 .LBB311
     /tmp/ccwpPJqp.s:759    .text:0000000000000234 .LBE311
     /tmp/ccwpPJqp.s:5524   .debug_loc:00000000000003b8 .LLST33
     /tmp/ccwpPJqp.s:880    .text:00000000000002b4 .LVL26
     /tmp/ccwpPJqp.s:887    .text:00000000000002c0 .LVL27
     /tmp/ccwpPJqp.s:1383   .text:00000000000004b0 .LBB112
     /tmp/ccwpPJqp.s:1465   .text:00000000000004f8 .LBE112
     /tmp/ccwpPJqp.s:1385   .text:00000000000004b0 .LBB113
     /tmp/ccwpPJqp.s:1400   .text:00000000000004bc .LBE113
     /tmp/ccwpPJqp.s:1404   .text:00000000000004c0 .LBB115
     /tmp/ccwpPJqp.s:1419   .text:00000000000004cc .LBE115
     /tmp/ccwpPJqp.s:1434   .text:00000000000004e8 .LBB117
     /tmp/ccwpPJqp.s:1445   .text:00000000000004ec .LBE117
     /tmp/ccwpPJqp.s:5531   .debug_loc:00000000000003db .LLST4
     /tmp/ccwpPJqp.s:1450   .text:00000000000004f0 .LBB119
GAS LISTING /tmp/ccwpPJqp.s 			page 58


     /tmp/ccwpPJqp.s:1464   .text:00000000000004f8 .LBE119
     /tmp/ccwpPJqp.s:5538   .debug_loc:00000000000003fe .LLST5
     /tmp/ccwpPJqp.s:1429   .text:00000000000004e4 .LVL74
     /tmp/ccwpPJqp.s:5961   .debug_str:0000000000000d11 .LASF265
     /tmp/ccwpPJqp.s:5545   .debug_loc:0000000000000421 .LLST0
     /tmp/ccwpPJqp.s:1481   .text:0000000000000510 .LBB101
     /tmp/ccwpPJqp.s:1496   .text:0000000000000534 .LBE101
     /tmp/ccwpPJqp.s:6105   .debug_str:0000000000001279 .LASF266
     /tmp/ccwpPJqp.s:1492   .text:0000000000000528 .LVL80
     /tmp/ccwpPJqp.s:1495   .text:0000000000000534 .LVL81
     /tmp/ccwpPJqp.s:193    .text:00000000000000d8 .LBB102
     /tmp/ccwpPJqp.s:208    .text:00000000000000e4 .LBE102
     /tmp/ccwpPJqp.s:5552   .debug_loc:0000000000000444 .LLST1
     /tmp/ccwpPJqp.s:177    .text:00000000000000c0 .LVL1
     /tmp/ccwpPJqp.s:191    .text:00000000000000d8 .LVL4
     /tmp/ccwpPJqp.s:73     .text:0000000000000044 .LBB90
     /tmp/ccwpPJqp.s:89     .text:0000000000000050 .LBE90
     /tmp/ccwpPJqp.s:1344   .text:0000000000000478 .LBB107
     /tmp/ccwpPJqp.s:1356   .text:0000000000000480 .LBE107
     /tmp/ccwpPJqp.s:5561   .debug_loc:000000000000046a .LLST2
     /tmp/ccwpPJqp.s:1373   .text:00000000000004a8 .LBB110
     /tmp/ccwpPJqp.s:1380   .text:00000000000004ac .LBE110
     /tmp/ccwpPJqp.s:5569   .debug_loc:000000000000048e .LLST3
     /tmp/ccwpPJqp.s:1303   .text:0000000000000454 .LBB123
     /tmp/ccwpPJqp.s:1318   .text:0000000000000460 .LBE123
     /tmp/ccwpPJqp.s:1319   .text:0000000000000460 .LBB125
     /tmp/ccwpPJqp.s:1334   .text:000000000000046c .LBE125
     /tmp/ccwpPJqp.s:1262   .text:000000000000042c .LBB130
     /tmp/ccwpPJqp.s:1277   .text:0000000000000438 .LBE130
     /tmp/ccwpPJqp.s:1278   .text:0000000000000438 .LBB132
     /tmp/ccwpPJqp.s:1293   .text:0000000000000444 .LBE132
     /tmp/ccwpPJqp.s:1221   .text:0000000000000404 .LBB138
     /tmp/ccwpPJqp.s:1236   .text:0000000000000410 .LBE138
     /tmp/ccwpPJqp.s:1237   .text:0000000000000410 .LBB140
     /tmp/ccwpPJqp.s:1252   .text:000000000000041c .LBE140
     /tmp/ccwpPJqp.s:71     .text:0000000000000044 .LVL0
     /tmp/ccwpPJqp.s:1255   .text:0000000000000424 .LVL66
     /tmp/ccwpPJqp.s:1296   .text:000000000000044c .LVL67
     /tmp/ccwpPJqp.s:1337   .text:0000000000000474 .LVL68
     /tmp/ccwpPJqp.s:1360   .text:0000000000000488 .LVL71
     /tmp/ccwpPJqp.s:10     .text:0000000000000000 .LFB50
     /tmp/ccwpPJqp.s:40     .text:0000000000000020 .LFE50
     /tmp/ccwpPJqp.s:5783   .debug_str:00000000000005a8 .LASF267
     /tmp/ccwpPJqp.s:5811   .debug_str:00000000000006b6 .LASF269
     /tmp/ccwpPJqp.s:6041   .debug_str:0000000000000fbe .LASF268
     /tmp/ccwpPJqp.s:6133   .debug_str:00000000000013c6 .LASF270
     /tmp/ccwpPJqp.s:5869   .debug_str:000000000000094b .LASF271
     /tmp/ccwpPJqp.s:5945   .debug_str:0000000000000c80 .LASF272
     /tmp/ccwpPJqp.s:5897   .debug_str:0000000000000a55 .LASF273
     /tmp/ccwpPJqp.s:6145   .debug_str:000000000000141d .LASF274
     /tmp/ccwpPJqp.s:704    .text:0000000000000208 .LVL10
     /tmp/ccwpPJqp.s:816    .text:0000000000000274 .LVL17
     /tmp/ccwpPJqp.s:827    .text:0000000000000278 .LVL18
     /tmp/ccwpPJqp.s:859    .text:0000000000000298 .LVL23
     /tmp/ccwpPJqp.s:834    .text:000000000000027c .LVL19
     /tmp/ccwpPJqp.s:841    .text:0000000000000280 .LVL20
     /tmp/ccwpPJqp.s:848    .text:0000000000000284 .LVL21
GAS LISTING /tmp/ccwpPJqp.s 			page 59


     /tmp/ccwpPJqp.s:899    .text:00000000000002c8 .LVL28
     /tmp/ccwpPJqp.s:931    .text:00000000000002e8 .LVL33
     /tmp/ccwpPJqp.s:906    .text:00000000000002cc .LVL29
     /tmp/ccwpPJqp.s:913    .text:00000000000002d0 .LVL30
     /tmp/ccwpPJqp.s:920    .text:00000000000002d4 .LVL31
     /tmp/ccwpPJqp.s:942    .text:00000000000002ec .LVL34
     /tmp/ccwpPJqp.s:954    .text:0000000000000304 .LVL37
     /tmp/ccwpPJqp.s:962    .text:0000000000000310 .LVL38
     /tmp/ccwpPJqp.s:968    .text:0000000000000314 .LVL39
     /tmp/ccwpPJqp.s:998    .text:0000000000000330 .LVL41
     /tmp/ccwpPJqp.s:1018   .text:000000000000034c .LVL45
     /tmp/ccwpPJqp.s:1005   .text:0000000000000334 .LVL42
     /tmp/ccwpPJqp.s:1010   .text:0000000000000338 .LVL43
     /tmp/ccwpPJqp.s:1029   .text:0000000000000350 .LVL46
     /tmp/ccwpPJqp.s:1044   .text:0000000000000360 .LVL48
     /tmp/ccwpPJqp.s:1055   .text:0000000000000364 .LVL49
     /tmp/ccwpPJqp.s:1065   .text:0000000000000378 .LVL51
     /tmp/ccwpPJqp.s:1071   .text:000000000000037c .LVL52
     /tmp/ccwpPJqp.s:1104   .text:0000000000000394 .LVL53
     /tmp/ccwpPJqp.s:1122   .text:00000000000003a4 .LVL55
     /tmp/ccwpPJqp.s:1159   .text:00000000000003d4 .LVL60
     /tmp/ccwpPJqp.s:1172   .text:00000000000003dc .LVL61
     /tmp/ccwpPJqp.s:1182   .text:00000000000003f4 .LVL64
     /tmp/ccwpPJqp.s:649    .text:00000000000001dc .LVL6
     /tmp/ccwpPJqp.s:662    .text:00000000000001e8 .LVL7
     /tmp/ccwpPJqp.s:1197   .text:0000000000000400 .LVL65
     /tmp/ccwpPJqp.s:866    .text:00000000000002a4 .LVL24
     /tmp/ccwpPJqp.s:874    .text:00000000000002ac .LVL25
     /tmp/ccwpPJqp.s:719    .text:0000000000000210 .LVL11
     /tmp/ccwpPJqp.s:728    .text:0000000000000214 .LVL12
     /tmp/ccwpPJqp.s:746    .text:0000000000000230 .LVL13
     /tmp/ccwpPJqp.s:755    .text:0000000000000234 .LVL14
     /tmp/ccwpPJqp.s:1433   .text:00000000000004e8 .LVL75
     /tmp/ccwpPJqp.s:1442   .text:00000000000004ec .LVL76
     /tmp/ccwpPJqp.s:1449   .text:00000000000004f0 .LVL77
     /tmp/ccwpPJqp.s:1461   .text:00000000000004f8 .LVL78
     /tmp/ccwpPJqp.s:179    .text:00000000000000c4 .LVL2
     /tmp/ccwpPJqp.s:184    .text:00000000000000cc .LVL3
     /tmp/ccwpPJqp.s:205    .text:00000000000000e4 .LVL5
     /tmp/ccwpPJqp.s:1343   .text:0000000000000478 .LVL69
     /tmp/ccwpPJqp.s:1353   .text:0000000000000480 .LVL70
     /tmp/ccwpPJqp.s:1372   .text:00000000000004a8 .LVL72
     /tmp/ccwpPJqp.s:1378   .text:00000000000004ac .LVL73
     /tmp/ccwpPJqp.s:1520   .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccwpPJqp.s:173    .text:00000000000000b8 .LBB98
     /tmp/ccwpPJqp.s:209    .text:00000000000000e4 .LBE98
     /tmp/ccwpPJqp.s:1469   .text:00000000000004f8 .LBB105
     /tmp/ccwpPJqp.s:1501   .text:0000000000000538 .LBE105
     /tmp/ccwpPJqp.s:215    .text:00000000000000e4 .LBB147
     /tmp/ccwpPJqp.s:273    .text:000000000000011c .LBE147
     /tmp/ccwpPJqp.s:277    .text:000000000000011c .LBB314
     /tmp/ccwpPJqp.s:287    .text:0000000000000128 .LBE314
     /tmp/ccwpPJqp.s:291    .text:0000000000000128 .LBB315
     /tmp/ccwpPJqp.s:303    .text:0000000000000134 .LBE315
     /tmp/ccwpPJqp.s:307    .text:0000000000000134 .LBB316
     /tmp/ccwpPJqp.s:321    .text:0000000000000140 .LBE316
     /tmp/ccwpPJqp.s:325    .text:0000000000000140 .LBB317
GAS LISTING /tmp/ccwpPJqp.s 			page 60


     /tmp/ccwpPJqp.s:341    .text:000000000000014c .LBE317
     /tmp/ccwpPJqp.s:345    .text:000000000000014c .LBB318
     /tmp/ccwpPJqp.s:363    .text:0000000000000158 .LBE318
     /tmp/ccwpPJqp.s:367    .text:0000000000000158 .LBB319
     /tmp/ccwpPJqp.s:387    .text:0000000000000164 .LBE319
     /tmp/ccwpPJqp.s:391    .text:0000000000000164 .LBB320
     /tmp/ccwpPJqp.s:413    .text:0000000000000170 .LBE320
     /tmp/ccwpPJqp.s:417    .text:0000000000000170 .LBB321
     /tmp/ccwpPJqp.s:441    .text:000000000000017c .LBE321
     /tmp/ccwpPJqp.s:445    .text:000000000000017c .LBB322
     /tmp/ccwpPJqp.s:471    .text:0000000000000188 .LBE322
     /tmp/ccwpPJqp.s:475    .text:0000000000000188 .LBB323
     /tmp/ccwpPJqp.s:503    .text:0000000000000194 .LBE323
     /tmp/ccwpPJqp.s:507    .text:0000000000000194 .LBB324
     /tmp/ccwpPJqp.s:537    .text:00000000000001a0 .LBE324
     /tmp/ccwpPJqp.s:541    .text:00000000000001a0 .LBB325
     /tmp/ccwpPJqp.s:573    .text:00000000000001ac .LBE325
     /tmp/ccwpPJqp.s:577    .text:00000000000001ac .LBB326
     /tmp/ccwpPJqp.s:611    .text:00000000000001b8 .LBE326
     /tmp/ccwpPJqp.s:615    .text:00000000000001b8 .LBB327
     /tmp/ccwpPJqp.s:760    .text:0000000000000234 .LBE327
     /tmp/ccwpPJqp.s:786    .text:0000000000000250 .LBB328
     /tmp/ccwpPJqp.s:1216   .text:0000000000000400 .LBE328

UNDEFINED SYMBOLS
_ZN5Riscv21pushSysCallParametersEv
plic_claim
plic_complete
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator15allocateSegmentEm
_ZN15MemoryAllocator17deallocateSegmentEPv
_ZN3TCB12createThreadEPFvPvES0_S0_b
_ZN3TCB13runningThreadE
_ZN3TCB8dispatchEv
_ZN9Scheduler11getInstanceEv
_ZN9Scheduler3putEP3TCB
_ZN15KernelSemaphore15createSemaphoreEt
_ZN15KernelSemaphore14closeSemaphoreEPS_
_ZN15KernelSemaphore4waitEv
_ZN15KernelSemaphore6signalEv
_ZN3TCB17insertSleepThreadEm
_ZN3TCB20suspendCurrentThreadEv
_ZN12KernelBuffer15getcGetInstanceEv
_ZN12KernelBuffer16removeFromBufferEv
_ZN12KernelBuffer15putcGetInstanceEv
_ZN12KernelBuffer16insertIntoBufferEi
_Z17printErrorMessagemmm
_ZN3TCB21updateSleepThreadListEv
_ZN3TCB16timeSliceCounterE
CONSOLE_STATUS
CONSOLE_RX_DATA
